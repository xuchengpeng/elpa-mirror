Package: kanagawa-theme
Fetcher: github
Source:  https://github.com/Fabiokleis/emacs-kanagawa-theme.git

Updating /mnt/store/melpa/working/kanagawa-theme/
Checking out 94418acc89f789f4172c5f68b2afacd784bf176d
Debugger entered--Lisp error: (error "kanagawa-theme[-pkg].el matching package name is m...")
  error("%s" "kanagawa-theme[-pkg].el matching package name is m...")
  (let ((err (apply #'format-message format-string args))) (let ((temp-buffer (generate-new-buffer " *temp*" t))) (save-current-buffer (set-buffer temp-buffer) (unwind-protect (progn (insert (format "%s  %-25s  %s\n" (format-time-string "%FT%T%z" nil t) (if ... ... ...) err)) (if (eq (char-before) 10) nil (insert "\n")) (goto-char (point-min)) (append-to-file (point) (1+ (line-end-position)) (expand-file-name "errors.log" package-build-archive-dir))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer))))) (error "%s" err))
  package-build--error("kanagawa-theme" "%s[-pkg].el matching package name is missing" "kanagawa-theme")
  (or (package-build--desc-from-package rcp files) (package-build--desc-from-library rcp files 'tar) (package-build--error name "%s[-pkg].el matching package name is missing" name))
  (let* ((target (expand-file-name (concat name "-" version) tmp-dir)) (desc (or (package-build--desc-from-package rcp files) (package-build--desc-from-library rcp files 'tar) (package-build--error name "%s[-pkg].el matching package name is missing" name)))) (package-build--copy-package-files files target) (package-build--write-pkg-file desc target) (package-build--generate-info-files rcp files target) (package-build--create-tar rcp tmp-dir) (package-build--write-pkg-readme rcp files) (package-build--write-archive-entry desc))
  (unwind-protect (let* ((target (expand-file-name (concat name "-" version) tmp-dir)) (desc (or (package-build--desc-from-package rcp files) (package-build--desc-from-library rcp files 'tar) (package-build--error name "%s[-pkg].el matching package name is missing" name)))) (package-build--copy-package-files files target) (package-build--write-pkg-file desc target) (package-build--generate-info-files rcp files target) (package-build--create-tar rcp tmp-dir) (package-build--write-pkg-readme rcp files) (package-build--write-archive-entry desc)) (delete-directory tmp-dir t nil))
  (let* ((name (eieio-oref rcp 'name)) (version (eieio-oref rcp 'version)) (tmp-dir (file-name-as-directory (make-temp-file name t)))) (unwind-protect (let* ((target (expand-file-name (concat name "-" version) tmp-dir)) (desc (or (package-build--desc-from-package rcp files) (package-build--desc-from-library rcp files 'tar) (package-build--error name "%s[-pkg].el matching package name is missing" name)))) (package-build--copy-package-files files target) (package-build--write-pkg-file desc target) (package-build--generate-info-files rcp files target) (package-build--create-tar rcp tmp-dir) (package-build--write-pkg-readme rcp files) (package-build--write-archive-entry desc)) (delete-directory tmp-dir t nil)))
  package-build--build-multi-file-package(#<package-github-recipe package-github-recipe-1577ca1bff40> (("kanagawa-dragon-theme.el" . "kanagawa-dragon-theme.el") ("kanagawa-lotus-theme.el" . "kanagawa-lotus-theme.el") ("kanagawa-themes.el" . "kanagawa-themes.el") ("kanagawa-wave-theme.el" . "kanagawa-wave-theme.el")))
  funcall(package-build--build-multi-file-package #<package-github-recipe package-github-recipe-1577ca1bff40> (("kanagawa-dragon-theme.el" . "kanagawa-dragon-theme.el") ("kanagawa-lotus-theme.el" . "kanagawa-lotus-theme.el") ("kanagawa-themes.el" . "kanagawa-themes.el") ("kanagawa-wave-theme.el" . "kanagawa-wave-theme.el")))
  (cond ((= (length files) 0) (package-build--error rcp "Unable to find files matching recipe patterns")) (package-build-build-function (funcall package-build-build-function rcp files)) ((= (length files) 1) (package-build--build-single-file-package rcp files)) (t (package-build--build-multi-file-package rcp files)))
  (let ((files (package-build-expand-files-spec rcp t))) (cond ((= (length files) 0) (package-build--error rcp "Unable to find files matching recipe patterns")) (package-build-build-function (funcall package-build-build-function rcp files)) ((= (length files) 1) (package-build--build-single-file-package rcp files)) (t (package-build--build-multi-file-package rcp files))) (if package-build-badge-data (progn (package-build--write-badge-image (eieio-oref rcp 'name) (eieio-oref rcp 'version) package-build-archive-dir))))
  (progn (funcall package-build-checkout-function rcp) (let* ((s (and t package-build-run-recipe-shell-command)) (command (and s (eieio-oref rcp 'shell-command)))) (if command (progn (package-build--message "Running %s" command) (package-build--call-sandboxed rcp shell-file-name shell-command-switch command)))) (let* ((s (and t package-build-run-recipe-make-targets)) (targets (and s (eieio-oref rcp 'make-targets)))) (if targets (progn (package-build--message "Running make %s" (string-join targets " ")) (apply #'package-build--call-sandboxed rcp "make" targets)) nil)) (let ((files (package-build-expand-files-spec rcp t))) (cond ((= (length files) 0) (package-build--error rcp "Unable to find files matching recipe patterns")) (package-build-build-function (funcall package-build-build-function rcp files)) ((= (length files) 1) (package-build--build-single-file-package rcp files)) (t (package-build--build-multi-file-package rcp files))) (if package-build-badge-data (progn (package-build--write-badge-image (eieio-oref rcp 'name) (eieio-oref rcp 'version) package-build-archive-dir)))))
  (unwind-protect (progn (funcall package-build-checkout-function rcp) (let* ((s (and t package-build-run-recipe-shell-command)) (command (and s (eieio-oref rcp 'shell-command)))) (if command (progn (package-build--message "Running %s" command) (package-build--call-sandboxed rcp shell-file-name shell-command-switch command)))) (let* ((s (and t package-build-run-recipe-make-targets)) (targets (and s (eieio-oref rcp 'make-targets)))) (if targets (progn (package-build--message "Running make %s" (string-join targets " ")) (apply #'package-build--call-sandboxed rcp "make" targets)) nil)) (let ((files (package-build-expand-files-spec rcp t))) (cond ((= (length files) 0) (package-build--error rcp "Unable to find files matching recipe patterns")) (package-build-build-function (funcall package-build-build-function rcp files)) ((= (length files) 1) (package-build--build-single-file-package rcp files)) (t (package-build--build-multi-file-package rcp files))) (if package-build-badge-data (progn (package-build--write-badge-image (eieio-oref rcp 'name) (eieio-oref rcp 'version) package-build-archive-dir))))) (funcall package-build-cleanup-function rcp))
  (let ((default-directory (package-build--working-tree rcp))) (unwind-protect (progn (funcall package-build-checkout-function rcp) (let* ((s (and t package-build-run-recipe-shell-command)) (command (and s (eieio-oref rcp ...)))) (if command (progn (package-build--message "Running %s" command) (package-build--call-sandboxed rcp shell-file-name shell-command-switch command)))) (let* ((s (and t package-build-run-recipe-make-targets)) (targets (and s (eieio-oref rcp ...)))) (if targets (progn (package-build--message "Running make %s" (string-join targets " ")) (apply #'package-build--call-sandboxed rcp "make" targets)) nil)) (let ((files (package-build-expand-files-spec rcp t))) (cond ((= (length files) 0) (package-build--error rcp "Unable to find files matching recipe patterns")) (package-build-build-function (funcall package-build-build-function rcp files)) ((= (length files) 1) (package-build--build-single-file-package rcp files)) (t (package-build--build-multi-file-package rcp files))) (if package-build-badge-data (progn (package-build--write-badge-image (eieio-oref rcp ...) (eieio-oref rcp ...) package-build-archive-dir))))) (funcall package-build-cleanup-function rcp)))
  package-build--package(#<package-github-recipe package-github-recipe-1577ca1bff40>)
  (progn (package-build--package rcp) (if dump-archive-contents (progn (package-build-dump-archive-contents))))
  (if version (progn (package-build--package rcp) (if dump-archive-contents (progn (package-build-dump-archive-contents)))))
  (if package-build--inhibit-build nil (package-build--select-version rcp) (setq version (eieio-oref rcp 'version)) (if version (progn (package-build--package rcp) (if dump-archive-contents (progn (package-build-dump-archive-contents))))) (if (not version) (message " ✗ Cannot determine version!") (message " ✓ Success:") (let ((--dolist-tail-- (directory-files-and-attributes package-build-archive-dir nil (format "\\`%s-[0-9]+" name)))) (while --dolist-tail-- (let ((x101 (car --dolist-tail--))) (progn (ignore (consp x101)) (let* (... ...) (let ... ...))) (setq --dolist-tail-- (cdr --dolist-tail--)))))))
  (let* ((start-time (current-time)) (rcp (package-recipe-lookup name)) (url (package-recipe--upstream-url rcp)) (repo (eieio-oref rcp 'repo)) (fetcher (package-recipe--fetcher rcp)) (version nil)) (cond ((not noninteractive) (message " • %s package %s (from %s)..." (if package-build--inhibit-build "Fetching" "Building") name (if repo (format "%s:%s" fetcher repo) url))) (package-build-verbose (message "Package: %s" name) (message "Fetcher: %s" fetcher) (message "Source:  %s\n" url))) (funcall package-build-fetch-function rcp) (if package-build--inhibit-build nil (package-build--select-version rcp) (setq version (eieio-oref rcp 'version)) (if version (progn (package-build--package rcp) (if dump-archive-contents (progn (package-build-dump-archive-contents))))) (if (not version) (message " ✗ Cannot determine version!") (message " ✓ Success:") (let ((--dolist-tail-- (directory-files-and-attributes package-build-archive-dir nil (format "\\`%s-[0-9]+" name)))) (while --dolist-tail-- (let ((x101 ...)) (progn (ignore ...) (let* ... ...)) (setq --dolist-tail-- (cdr --dolist-tail--))))))) (message "%s %s in %.3fs, finished at %s" (if version "Built" "Fetched") name (float-time (time-since start-time)) (format-time-string "%FT%T%z" nil t)))
  package-build-archive("kanagawa-theme")
  command-line-1(("-L" "/mnt/store/melpa/package-build" "--eval" "(progn (setq package-build-stable nil) (setq packa..." "--eval" "(progn (setq package-build--melpa-base \"/mnt/store..." "--eval" "(setq package-build-timeout-secs 600)" "--eval" "()" "--load" "package-build.el" "--eval" "(package-build-archive \"kanagawa-theme\")"))
  command-line()
  normal-top-level()


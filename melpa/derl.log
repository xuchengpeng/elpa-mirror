Package: derl
Fetcher: github
Source:  https://github.com/axelf4/derl.el

Updating /mnt/store/melpa/working/derl/
Checking out aa10aae9891a599f523f269cc391ed316775d12a
Debugger entered--Lisp error: (error "derl[-pkg].el matching package name is missing")
  error("%s" "derl[-pkg].el matching package name is missing")
  (let ((err (apply #'format-message format-string args))) (let ((temp-buffer (generate-new-buffer " *temp*" t))) (save-current-buffer (set-buffer temp-buffer) (unwind-protect (progn (insert (format "%s  %-25s  %s\n" (format-time-string "%FT%T%z" nil t) (if ... ... ...) err)) (if (eq (char-before) 10) nil (insert "\n")) (goto-char (point-min)) (append-to-file (point) (1+ (line-end-position)) (expand-file-name "errors.log" package-build-archive-dir))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer))))) (error "%s" err))
  package-build--error("derl" "%s[-pkg].el matching package name is missing" "derl")
  (if (or (rassoc (concat name ".el") files) (rassoc (concat name "-pkg.el") files)) nil (package-build--error name "%s[-pkg].el matching package name is missing" name))
  (progn (if (or (rassoc (concat name ".el") files) (rassoc (concat name "-pkg.el") files)) nil (package-build--error name "%s[-pkg].el matching package name is missing" name)) (package-build--extract-from-library rcp files) (package-build--extract-from-package rcp files) (if package-build--inhibit-build nil (unwind-protect (progn (package-build--copy-package-files files target) (package-build--set-version-headers rcp target) (package-build--write-pkg-file rcp target) (package-build--generate-info-files rcp files target) (package-build--create-tar rcp tmpdir) (package-build--write-pkg-readme rcp files)) (delete-directory tmpdir t nil))) (package-build--write-archive-entry rcp))
  (let* ((tmpdir (file-name-as-directory (make-temp-file name t))) (target (expand-file-name (concat name "-" version) tmpdir))) (progn (if (or (rassoc (concat name ".el") files) (rassoc (concat name "-pkg.el") files)) nil (package-build--error name "%s[-pkg].el matching package name is missing" name)) (package-build--extract-from-library rcp files) (package-build--extract-from-package rcp files) (if package-build--inhibit-build nil (unwind-protect (progn (package-build--copy-package-files files target) (package-build--set-version-headers rcp target) (package-build--write-pkg-file rcp target) (package-build--generate-info-files rcp files target) (package-build--create-tar rcp tmpdir) (package-build--write-pkg-readme rcp files)) (delete-directory tmpdir t nil))) (package-build--write-archive-entry rcp)))
  (let ((name x147) (version x148)) (let* ((tmpdir (file-name-as-directory (make-temp-file name t))) (target (expand-file-name (concat name "-" version) tmpdir))) (progn (if (or (rassoc (concat name ".el") files) (rassoc (concat name "-pkg.el") files)) nil (package-build--error name "%s[-pkg].el matching package name is missing" name)) (package-build--extract-from-library rcp files) (package-build--extract-from-package rcp files) (if package-build--inhibit-build nil (unwind-protect (progn (package-build--copy-package-files files target) (package-build--set-version-headers rcp target) (package-build--write-pkg-file rcp target) (package-build--generate-info-files rcp files target) (package-build--create-tar rcp tmpdir) (package-build--write-pkg-readme rcp files)) (delete-directory tmpdir t nil))) (package-build--write-archive-entry rcp))))
  (let* ((x147 (eieio-oref rcp 'name)) (x148 (eieio-oref rcp 'version))) (let ((name x147) (version x148)) (let* ((tmpdir (file-name-as-directory (make-temp-file name t))) (target (expand-file-name (concat name "-" version) tmpdir))) (progn (if (or (rassoc (concat name ".el") files) (rassoc (concat name "-pkg.el") files)) nil (package-build--error name "%s[-pkg].el matching package name is missing" name)) (package-build--extract-from-library rcp files) (package-build--extract-from-package rcp files) (if package-build--inhibit-build nil (unwind-protect (progn (package-build--copy-package-files files target) (package-build--set-version-headers rcp target) (package-build--write-pkg-file rcp target) (package-build--generate-info-files rcp files target) (package-build--create-tar rcp tmpdir) (package-build--write-pkg-readme rcp files)) (delete-directory tmpdir t nil))) (package-build--write-archive-entry rcp)))))
  (progn (ignore (eieio-object-p rcp)) (let* ((x147 (eieio-oref rcp 'name)) (x148 (eieio-oref rcp 'version))) (let ((name x147) (version x148)) (let* ((tmpdir (file-name-as-directory (make-temp-file name t))) (target (expand-file-name (concat name "-" version) tmpdir))) (progn (if (or (rassoc ... files) (rassoc ... files)) nil (package-build--error name "%s[-pkg].el matching package name is missing" name)) (package-build--extract-from-library rcp files) (package-build--extract-from-package rcp files) (if package-build--inhibit-build nil (unwind-protect (progn ... ... ... ... ... ...) (delete-directory tmpdir t nil))) (package-build--write-archive-entry rcp))))))
  package-build--build-multi-file-package(#<package-github-recipe package-github-recipe-1571d43ecb5c> (("earl.el" . "earl.el")))
  funcall(package-build--build-multi-file-package #<package-github-recipe package-github-recipe-1571d43ecb5c> (("earl.el" . "earl.el")))
  (cond ((= (length files) 0) (package-build--error rcp "Unable to find files matching recipe patterns")) (package-build-build-function (funcall package-build-build-function rcp files)) ((= (length files) 1) (package-build--build-single-file-package rcp files)) (t (package-build--build-multi-file-package rcp files)))
  (let ((files (package-build-expand-files-spec rcp t))) (cond ((= (length files) 0) (package-build--error rcp "Unable to find files matching recipe patterns")) (package-build-build-function (funcall package-build-build-function rcp files)) ((= (length files) 1) (package-build--build-single-file-package rcp files)) (t (package-build--build-multi-file-package rcp files))) (if package-build-badge-data (progn (package-build--write-badge-image name version package-build-archive-dir))))
  (progn (package-build--checkout rcp) (setenv "PACKAGE_VERSION" version) (setenv "PACKAGE_REVISION" commit) (setenv "PACKAGE_REVDESC" revdesc) (let* ((s (and t package-build-run-recipe-shell-command)) (command (and s (eieio-oref rcp 'shell-command)))) (if command (progn (package-build--message "Running %s" command) (package-build--call-sandboxed rcp shell-file-name shell-command-switch command)))) (let* ((s (and t package-build-run-recipe-make-targets)) (targets (and s (eieio-oref rcp 'make-targets)))) (if targets (progn (package-build--message "Running make %s" (string-join targets " ")) (apply #'package-build--call-sandboxed rcp "make" targets)) nil)) (let ((files (package-build-expand-files-spec rcp t))) (cond ((= (length files) 0) (package-build--error rcp "Unable to find files matching recipe patterns")) (package-build-build-function (funcall package-build-build-function rcp files)) ((= (length files) 1) (package-build--build-single-file-package rcp files)) (t (package-build--build-multi-file-package rcp files))) (if package-build-badge-data (progn (package-build--write-badge-image name version package-build-archive-dir)))))
  (let ((name x139) (version x140) (commit x141) (revdesc x142)) (progn (package-build--checkout rcp) (setenv "PACKAGE_VERSION" version) (setenv "PACKAGE_REVISION" commit) (setenv "PACKAGE_REVDESC" revdesc) (let* ((s (and t package-build-run-recipe-shell-command)) (command (and s (eieio-oref rcp 'shell-command)))) (if command (progn (package-build--message "Running %s" command) (package-build--call-sandboxed rcp shell-file-name shell-command-switch command)))) (let* ((s (and t package-build-run-recipe-make-targets)) (targets (and s (eieio-oref rcp 'make-targets)))) (if targets (progn (package-build--message "Running make %s" (string-join targets " ")) (apply #'package-build--call-sandboxed rcp "make" targets)) nil)) (let ((files (package-build-expand-files-spec rcp t))) (cond ((= (length files) 0) (package-build--error rcp "Unable to find files matching recipe patterns")) (package-build-build-function (funcall package-build-build-function rcp files)) ((= (length files) 1) (package-build--build-single-file-package rcp files)) (t (package-build--build-multi-file-package rcp files))) (if package-build-badge-data (progn (package-build--write-badge-image name version package-build-archive-dir))))))
  (let* ((x139 (eieio-oref x0 'name)) (x140 (eieio-oref x0 'version)) (x141 (eieio-oref x0 'commit)) (x142 (eieio-oref x0 'revdesc))) (let ((name x139) (version x140) (commit x141) (revdesc x142)) (progn (package-build--checkout rcp) (setenv "PACKAGE_VERSION" version) (setenv "PACKAGE_REVISION" commit) (setenv "PACKAGE_REVDESC" revdesc) (let* ((s (and t package-build-run-recipe-shell-command)) (command (and s (eieio-oref rcp ...)))) (if command (progn (package-build--message "Running %s" command) (package-build--call-sandboxed rcp shell-file-name shell-command-switch command)))) (let* ((s (and t package-build-run-recipe-make-targets)) (targets (and s (eieio-oref rcp ...)))) (if targets (progn (package-build--message "Running make %s" (string-join targets " ")) (apply #'package-build--call-sandboxed rcp "make" targets)) nil)) (let ((files (package-build-expand-files-spec rcp t))) (cond ((= (length files) 0) (package-build--error rcp "Unable to find files matching recipe patterns")) (package-build-build-function (funcall package-build-build-function rcp files)) ((= (length files) 1) (package-build--build-single-file-package rcp files)) (t (package-build--build-multi-file-package rcp files))) (if package-build-badge-data (progn (package-build--write-badge-image name version package-build-archive-dir)))))))
  (progn (ignore (eieio-object-p x0)) (let* ((x139 (eieio-oref x0 'name)) (x140 (eieio-oref x0 'version)) (x141 (eieio-oref x0 'commit)) (x142 (eieio-oref x0 'revdesc))) (let ((name x139) (version x140) (commit x141) (revdesc x142)) (progn (package-build--checkout rcp) (setenv "PACKAGE_VERSION" version) (setenv "PACKAGE_REVISION" commit) (setenv "PACKAGE_REVDESC" revdesc) (let* ((s (and t package-build-run-recipe-shell-command)) (command (and s ...))) (if command (progn (package-build--message "Running %s" command) (package-build--call-sandboxed rcp shell-file-name shell-command-switch command)))) (let* ((s (and t package-build-run-recipe-make-targets)) (targets (and s ...))) (if targets (progn (package-build--message "Running make %s" ...) (apply ... rcp "make" targets)) nil)) (let ((files (package-build-expand-files-spec rcp t))) (cond ((= ... 0) (package-build--error rcp "Unable to find files matching recipe patterns")) (package-build-build-function (funcall package-build-build-function rcp files)) ((= ... 1) (package-build--build-single-file-package rcp files)) (t (package-build--build-multi-file-package rcp files))) (if package-build-badge-data (progn (package-build--write-badge-image name version package-build-archive-dir))))))))
  (let ((x0 rcp) (process-environment (copy-sequence process-environment))) (progn (ignore (eieio-object-p x0)) (let* ((x139 (eieio-oref x0 'name)) (x140 (eieio-oref x0 'version)) (x141 (eieio-oref x0 'commit)) (x142 (eieio-oref x0 'revdesc))) (let ((name x139) (version x140) (commit x141) (revdesc x142)) (progn (package-build--checkout rcp) (setenv "PACKAGE_VERSION" version) (setenv "PACKAGE_REVISION" commit) (setenv "PACKAGE_REVDESC" revdesc) (let* ((s ...) (command ...)) (if command (progn ... ...))) (let* ((s ...) (targets ...)) (if targets (progn ... ...) nil)) (let ((files ...)) (cond (... ...) (package-build-build-function ...) (... ...) (t ...)) (if package-build-badge-data (progn ...))))))))
  (unwind-protect (let ((x0 rcp) (process-environment (copy-sequence process-environment))) (progn (ignore (eieio-object-p x0)) (let* ((x139 (eieio-oref x0 'name)) (x140 (eieio-oref x0 'version)) (x141 (eieio-oref x0 'commit)) (x142 (eieio-oref x0 'revdesc))) (let ((name x139) (version x140) (commit x141) (revdesc x142)) (progn (package-build--checkout rcp) (setenv "PACKAGE_VERSION" version) (setenv "PACKAGE_REVISION" commit) (setenv "PACKAGE_REVDESC" revdesc) (let* (... ...) (if command ...)) (let* (... ...) (if targets ... nil)) (let (...) (cond ... ... ... ...) (if package-build-badge-data ...))))))) (package-build--cleanup rcp))
  (let ((default-directory (package-recipe--working-tree rcp))) (unwind-protect (let ((x0 rcp) (process-environment (copy-sequence process-environment))) (progn (ignore (eieio-object-p x0)) (let* ((x139 (eieio-oref x0 ...)) (x140 (eieio-oref x0 ...)) (x141 (eieio-oref x0 ...)) (x142 (eieio-oref x0 ...))) (let ((name x139) (version x140) (commit x141) (revdesc x142)) (progn (package-build--checkout rcp) (setenv "PACKAGE_VERSION" version) (setenv "PACKAGE_REVISION" commit) (setenv "PACKAGE_REVDESC" revdesc) (let* ... ...) (let* ... ...) (let ... ... ...)))))) (package-build--cleanup rcp)))
  package-build--package(#<package-github-recipe package-github-recipe-1571d43ecb5c>)
  (progn (package-build--package rcp) (if dump-archive-contents (progn (package-build-dump-archive-contents))))
  (if version (progn (package-build--package rcp) (if dump-archive-contents (progn (package-build-dump-archive-contents)))))
  (if package-build--inhibit-update nil (package-build--select-version rcp) (setq version (eieio-oref rcp 'version)) (if version (progn (package-build--package rcp) (if dump-archive-contents (progn (package-build-dump-archive-contents))))) (if (not version) (message " ✗ Cannot determine version!") (message " ✓ Success:") (let ((--dolist-tail-- (directory-files-and-attributes package-build-archive-dir nil (format "\\`%s-[0-9]+" name)))) (while --dolist-tail-- (let ((x136 (car --dolist-tail--))) (progn (ignore (consp x136)) (let* (... ...) (let ... ...))) (setq --dolist-tail-- (cdr --dolist-tail--)))))))
  (let* ((start-time (current-time)) (rcp (package-recipe-lookup name)) (url (eieio-oref rcp 'url)) (repo (eieio-oref rcp 'repo)) (fetcher (package-recipe--fetcher rcp)) (version nil)) (cond ((not noninteractive) (message " • %s package %s (from %s)..." (if package-build--inhibit-update "Fetching" "Building") name (if repo (format "%s:%s" fetcher repo) url))) (package-build-verbose (message "Package: %s" name) (message "Fetcher: %s" fetcher) (message "Source:  %s\n" url))) (package-build--fetch rcp) (if package-build--inhibit-update nil (package-build--select-version rcp) (setq version (eieio-oref rcp 'version)) (if version (progn (package-build--package rcp) (if dump-archive-contents (progn (package-build-dump-archive-contents))))) (if (not version) (message " ✗ Cannot determine version!") (message " ✓ Success:") (let ((--dolist-tail-- (directory-files-and-attributes package-build-archive-dir nil (format "\\`%s-[0-9]+" name)))) (while --dolist-tail-- (let ((x136 ...)) (progn (ignore ...) (let* ... ...)) (setq --dolist-tail-- (cdr --dolist-tail--))))))) (message "%s %s in %.3fs, finished at %s" (if version "Built" "Fetched") name (float-time (time-since start-time)) (format-time-string "%FT%T%z" nil t)))
  package-build-archive("derl")
  command-line-1(("-L" "/mnt/store/melpa/package-build" "--eval" "(progn (setq package-build-stable nil) (setq packa..." "--eval" "(progn (setq package-build--melpa-base \"/mnt/store..." "--eval" "(setq package-build-timeout-secs 600)" "--eval" "()" "--load" "package-build.el" "--eval" "(package-build-archive \"derl\")"))
  command-line()
  normal-top-level()


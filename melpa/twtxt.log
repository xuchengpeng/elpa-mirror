Package: twtxt
Fetcher: codeberg
Source:  https://codeberg.org/deadblackclover/twtxt-el

Updating /mnt/store/melpa/working/twtxt/
Checking out 3155f8e570f7c92c31cb57f265c255f925b26ea9
Debugger entered--Lisp error: (end-of-file)
  read-from-string("((emacs \"25.1\") (request \"0.2.0\") (visual-fill-col...")
  package-read-from-string("((emacs \"25.1\") (request \"0.2.0\") (visual-fill-col...")
  (package--prepare-dependencies (package-read-from-string (string-join require-lines " ")))
  (progn (package--prepare-dependencies (package-read-from-string (string-join require-lines " "))))
  (if require-lines (progn (package--prepare-dependencies (package-read-from-string (string-join require-lines " ")))))
  (let* ((require-lines (and t (lm-header-multiline "package-requires")))) (if require-lines (progn (package--prepare-dependencies (package-read-from-string (string-join require-lines " "))))))
  (cond ((fboundp 'lm-package-requires) (lm-package-requires)) ((fboundp 'package--prepare-dependencies) (let* ((require-lines (and t (lm-header-multiline "package-requires")))) (if require-lines (progn (package--prepare-dependencies (package-read-from-string (string-join require-lines " "))))))))
  (eieio-oset rcp 'dependencies (cond ((fboundp 'lm-package-requires) (lm-package-requires)) ((fboundp 'package--prepare-dependencies) (let* ((require-lines (and t (lm-header-multiline "package-requires")))) (if require-lines (progn (package--prepare-dependencies (package-read-from-string ...))))))))
  (progn (insert-file-contents file) (eieio-oset rcp 'summary (package-build--normalize-summary (save-excursion (goto-char (point-min)) (and (re-search-forward "^;;; [^ ]*\\.el ---[ \11]*\\(.*?\\)[ \11]*\\(-\\*-.*-\\*-[ \11..." nil t) (match-string-no-properties 1))))) (eieio-oset rcp 'dependencies (cond ((fboundp 'lm-package-requires) (lm-package-requires)) ((fboundp 'package--prepare-dependencies) (let* ((require-lines (and t ...))) (if require-lines (progn (package--prepare-dependencies ...))))))) (eieio-oset rcp 'webpage (or (if (fboundp 'lm-website) (lm-website) (with-no-warnings (lm-homepage))) (let* ((format (and t (eieio-oref rcp ...)))) (if format (progn (format format (eieio-oref rcp ...))))))) (eieio-oset rcp 'keywords (lm-keywords-list)) (eieio-oset rcp 'maintainers (if (fboundp 'lm-maintainers) (lm-maintainers) (with-no-warnings (let* ((maintainer (and t ...))) (if maintainer (progn (list maintainer))))))) (eieio-oset rcp 'authors (lm-authors)))
  (unwind-protect (progn (insert-file-contents file) (eieio-oset rcp 'summary (package-build--normalize-summary (save-excursion (goto-char (point-min)) (and (re-search-forward "^;;; [^ ]*\\.el ---[ \11]*\\(.*?\\)[ \11]*\\(-\\*-.*-\\*-[ \11..." nil t) (match-string-no-properties 1))))) (eieio-oset rcp 'dependencies (cond ((fboundp 'lm-package-requires) (lm-package-requires)) ((fboundp 'package--prepare-dependencies) (let* ((require-lines ...)) (if require-lines (progn ...)))))) (eieio-oset rcp 'webpage (or (if (fboundp 'lm-website) (lm-website) (with-no-warnings (lm-homepage))) (let* ((format (and t ...))) (if format (progn (format format ...)))))) (eieio-oset rcp 'keywords (lm-keywords-list)) (eieio-oset rcp 'maintainers (if (fboundp 'lm-maintainers) (lm-maintainers) (with-no-warnings (let* ((maintainer ...)) (if maintainer (progn ...)))))) (eieio-oset rcp 'authors (lm-authors))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))
  (save-current-buffer (set-buffer temp-buffer) (unwind-protect (progn (insert-file-contents file) (eieio-oset rcp 'summary (package-build--normalize-summary (save-excursion (goto-char (point-min)) (and (re-search-forward "^;;; [^ ]*\\.el ---[ \11]*\\(.*?\\)[ \11]*\\(-\\*-.*-\\*-[ \11..." nil t) (match-string-no-properties 1))))) (eieio-oset rcp 'dependencies (cond ((fboundp 'lm-package-requires) (lm-package-requires)) ((fboundp 'package--prepare-dependencies) (let* (...) (if require-lines ...))))) (eieio-oset rcp 'webpage (or (if (fboundp 'lm-website) (lm-website) (with-no-warnings (lm-homepage))) (let* ((format ...)) (if format (progn ...))))) (eieio-oset rcp 'keywords (lm-keywords-list)) (eieio-oset rcp 'maintainers (if (fboundp 'lm-maintainers) (lm-maintainers) (with-no-warnings (let* (...) (if maintainer ...))))) (eieio-oset rcp 'authors (lm-authors))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer))))
  (let ((temp-buffer (generate-new-buffer " *temp*" t))) (save-current-buffer (set-buffer temp-buffer) (unwind-protect (progn (insert-file-contents file) (eieio-oset rcp 'summary (package-build--normalize-summary (save-excursion (goto-char ...) (and ... ...)))) (eieio-oset rcp 'dependencies (cond ((fboundp ...) (lm-package-requires)) ((fboundp ...) (let* ... ...)))) (eieio-oset rcp 'webpage (or (if (fboundp ...) (lm-website) (with-no-warnings ...)) (let* (...) (if format ...)))) (eieio-oset rcp 'keywords (lm-keywords-list)) (eieio-oset rcp 'maintainers (if (fboundp 'lm-maintainers) (lm-maintainers) (with-no-warnings (let* ... ...)))) (eieio-oset rcp 'authors (lm-authors))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))))
  (progn (let ((temp-buffer (generate-new-buffer " *temp*" t))) (save-current-buffer (set-buffer temp-buffer) (unwind-protect (progn (insert-file-contents file) (eieio-oset rcp 'summary (package-build--normalize-summary (save-excursion ... ...))) (eieio-oset rcp 'dependencies (cond (... ...) (... ...))) (eieio-oset rcp 'webpage (or (if ... ... ...) (let* ... ...))) (eieio-oset rcp 'keywords (lm-keywords-list)) (eieio-oset rcp 'maintainers (if (fboundp ...) (lm-maintainers) (with-no-warnings ...))) (eieio-oset rcp 'authors (lm-authors))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer))))))
  (if (file-exists-p file) (progn (let ((temp-buffer (generate-new-buffer " *temp*" t))) (save-current-buffer (set-buffer temp-buffer) (unwind-protect (progn (insert-file-contents file) (eieio-oset rcp 'summary (package-build--normalize-summary ...)) (eieio-oset rcp 'dependencies (cond ... ...)) (eieio-oset rcp 'webpage (or ... ...)) (eieio-oset rcp 'keywords (lm-keywords-list)) (eieio-oset rcp 'maintainers (if ... ... ...)) (eieio-oset rcp 'authors (lm-authors))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))))))
  (let* ((name (eieio-oref rcp 'name)) (file (concat name ".el")) (file (or (car (rassoc file files)) file))) (if (file-exists-p file) (progn (let ((temp-buffer (generate-new-buffer " *temp*" t))) (save-current-buffer (set-buffer temp-buffer) (unwind-protect (progn (insert-file-contents file) (eieio-oset rcp ... ...) (eieio-oset rcp ... ...) (eieio-oset rcp ... ...) (eieio-oset rcp ... ...) (eieio-oset rcp ... ...) (eieio-oset rcp ... ...)) (and (buffer-name temp-buffer) (kill-buffer temp-buffer))))))))
  package-build--extract-from-library(#<package-codeberg-recipe package-codeberg-recipe-155c290fda42> (("twtxt-feed.el" . "twtxt-feed.el") ("twtxt-image.el" . "twtxt-image.el") ("twtxt-notifications.el" . "twtxt-notifications.el") ("twtxt-post.el" . "twtxt-post.el") ("twtxt-profile.el" . "twtxt-profile.el") ("twtxt-string.el" . "twtxt-string.el") ("twtxt-thread.el" . "twtxt-thread.el") ("twtxt-timeline.el" . "twtxt-timeline.el") ("twtxt-ui.el" . "twtxt-ui.el") ("twtxt-variables.el" . "twtxt-variables.el") ("twtxt.el" . "twtxt.el")))
  (progn (if (or (rassoc (concat name ".el") files) (rassoc (concat name "-pkg.el") files)) nil (package-build--error name "%s[-pkg].el matching package name is missing" name)) (package-build--extract-from-library rcp files) (package-build--extract-from-package rcp files) (if package-build--inhibit-build nil (unwind-protect (progn (package-build--copy-package-files files target) (package-build--set-version-headers rcp target) (package-build--write-pkg-file rcp target) (package-build--generate-info-files rcp files target) (package-build--create-tar rcp tmpdir) (package-build--write-pkg-readme rcp files)) (delete-directory tmpdir t nil))) (package-build--write-archive-entry rcp))
  (let* ((tmpdir (file-name-as-directory (make-temp-file name t))) (target (expand-file-name (concat name "-" version) tmpdir))) (progn (if (or (rassoc (concat name ".el") files) (rassoc (concat name "-pkg.el") files)) nil (package-build--error name "%s[-pkg].el matching package name is missing" name)) (package-build--extract-from-library rcp files) (package-build--extract-from-package rcp files) (if package-build--inhibit-build nil (unwind-protect (progn (package-build--copy-package-files files target) (package-build--set-version-headers rcp target) (package-build--write-pkg-file rcp target) (package-build--generate-info-files rcp files target) (package-build--create-tar rcp tmpdir) (package-build--write-pkg-readme rcp files)) (delete-directory tmpdir t nil))) (package-build--write-archive-entry rcp)))
  (let ((name x147) (version x148)) (let* ((tmpdir (file-name-as-directory (make-temp-file name t))) (target (expand-file-name (concat name "-" version) tmpdir))) (progn (if (or (rassoc (concat name ".el") files) (rassoc (concat name "-pkg.el") files)) nil (package-build--error name "%s[-pkg].el matching package name is missing" name)) (package-build--extract-from-library rcp files) (package-build--extract-from-package rcp files) (if package-build--inhibit-build nil (unwind-protect (progn (package-build--copy-package-files files target) (package-build--set-version-headers rcp target) (package-build--write-pkg-file rcp target) (package-build--generate-info-files rcp files target) (package-build--create-tar rcp tmpdir) (package-build--write-pkg-readme rcp files)) (delete-directory tmpdir t nil))) (package-build--write-archive-entry rcp))))
...
  package-build--build-multi-file-package(#<package-codeberg-recipe package-codeberg-recipe-155c290fda42> (("twtxt-feed.el" . "twtxt-feed.el") ("twtxt-image.el" . "twtxt-image.el") ("twtxt-notifications.el" . "twtxt-notifications.el") ("twtxt-post.el" . "twtxt-post.el") ("twtxt-profile.el" . "twtxt-profile.el") ("twtxt-string.el" . "twtxt-string.el") ("twtxt-thread.el" . "twtxt-thread.el") ("twtxt-timeline.el" . "twtxt-timeline.el") ("twtxt-ui.el" . "twtxt-ui.el") ("twtxt-variables.el" . "twtxt-variables.el") ("twtxt.el" . "twtxt.el")))
  funcall(package-build--build-multi-file-package #<package-codeberg-recipe package-codeberg-recipe-155c290fda42> (("twtxt-feed.el" . "twtxt-feed.el") ("twtxt-image.el" . "twtxt-image.el") ("twtxt-notifications.el" . "twtxt-notifications.el") ("twtxt-post.el" . "twtxt-post.el") ("twtxt-profile.el" . "twtxt-profile.el") ("twtxt-string.el" . "twtxt-string.el") ("twtxt-thread.el" . "twtxt-thread.el") ("twtxt-timeline.el" . "twtxt-timeline.el") ("twtxt-ui.el" . "twtxt-ui.el") ("twtxt-variables.el" . "twtxt-variables.el") ("twtxt.el" . "twtxt.el")))
  (if files (funcall (or package-build-build-function 'package-build--legacy-build) rcp files) (package-build--error rcp "Unable to find files matching recipe patterns"))
  (let* ((files (and t (package-build-expand-files-spec rcp t)))) (if files (funcall (or package-build-build-function 'package-build--legacy-build) rcp files) (package-build--error rcp "Unable to find files matching recipe patterns")))
  (progn (package-build--checkout rcp) (setenv "PACKAGE_VERSION" version) (setenv "PACKAGE_REVISION" commit) (setenv "PACKAGE_REVDESC" revdesc) (let* ((s (and t package-build-run-recipe-shell-command)) (command (and s (eieio-oref rcp 'shell-command)))) (if command (progn (package-build--message "Running %s" command) (package-build--call-sandboxed rcp shell-file-name shell-command-switch command)))) (let* ((s (and t package-build-run-recipe-make-targets)) (targets (and s (eieio-oref rcp 'make-targets)))) (if targets (progn (package-build--message "Running make %s" (string-join targets " ")) (apply #'package-build--call-sandboxed rcp "make" targets)) nil)) (let* ((files (and t (package-build-expand-files-spec rcp t)))) (if files (funcall (or package-build-build-function 'package-build--legacy-build) rcp files) (package-build--error rcp "Unable to find files matching recipe patterns"))) (if package-build-badge-data (progn (package-build--write-badge-image name version package-build-archive-dir))))
  (let ((name x139) (version x140) (commit x141) (revdesc x142)) (progn (package-build--checkout rcp) (setenv "PACKAGE_VERSION" version) (setenv "PACKAGE_REVISION" commit) (setenv "PACKAGE_REVDESC" revdesc) (let* ((s (and t package-build-run-recipe-shell-command)) (command (and s (eieio-oref rcp 'shell-command)))) (if command (progn (package-build--message "Running %s" command) (package-build--call-sandboxed rcp shell-file-name shell-command-switch command)))) (let* ((s (and t package-build-run-recipe-make-targets)) (targets (and s (eieio-oref rcp 'make-targets)))) (if targets (progn (package-build--message "Running make %s" (string-join targets " ")) (apply #'package-build--call-sandboxed rcp "make" targets)) nil)) (let* ((files (and t (package-build-expand-files-spec rcp t)))) (if files (funcall (or package-build-build-function 'package-build--legacy-build) rcp files) (package-build--error rcp "Unable to find files matching recipe patterns"))) (if package-build-badge-data (progn (package-build--write-badge-image name version package-build-archive-dir)))))
  (let* ((x139 (eieio-oref x0 'name)) (x140 (eieio-oref x0 'version)) (x141 (eieio-oref x0 'commit)) (x142 (eieio-oref x0 'revdesc))) (let ((name x139) (version x140) (commit x141) (revdesc x142)) (progn (package-build--checkout rcp) (setenv "PACKAGE_VERSION" version) (setenv "PACKAGE_REVISION" commit) (setenv "PACKAGE_REVDESC" revdesc) (let* ((s (and t package-build-run-recipe-shell-command)) (command (and s (eieio-oref rcp ...)))) (if command (progn (package-build--message "Running %s" command) (package-build--call-sandboxed rcp shell-file-name shell-command-switch command)))) (let* ((s (and t package-build-run-recipe-make-targets)) (targets (and s (eieio-oref rcp ...)))) (if targets (progn (package-build--message "Running make %s" (string-join targets " ")) (apply #'package-build--call-sandboxed rcp "make" targets)) nil)) (let* ((files (and t (package-build-expand-files-spec rcp t)))) (if files (funcall (or package-build-build-function 'package-build--legacy-build) rcp files) (package-build--error rcp "Unable to find files matching recipe patterns"))) (if package-build-badge-data (progn (package-build--write-badge-image name version package-build-archive-dir))))))
  (progn (ignore (eieio-object-p x0)) (let* ((x139 (eieio-oref x0 'name)) (x140 (eieio-oref x0 'version)) (x141 (eieio-oref x0 'commit)) (x142 (eieio-oref x0 'revdesc))) (let ((name x139) (version x140) (commit x141) (revdesc x142)) (progn (package-build--checkout rcp) (setenv "PACKAGE_VERSION" version) (setenv "PACKAGE_REVISION" commit) (setenv "PACKAGE_REVDESC" revdesc) (let* ((s (and t package-build-run-recipe-shell-command)) (command (and s ...))) (if command (progn (package-build--message "Running %s" command) (package-build--call-sandboxed rcp shell-file-name shell-command-switch command)))) (let* ((s (and t package-build-run-recipe-make-targets)) (targets (and s ...))) (if targets (progn (package-build--message "Running make %s" ...) (apply ... rcp "make" targets)) nil)) (let* ((files (and t ...))) (if files (funcall (or package-build-build-function ...) rcp files) (package-build--error rcp "Unable to find files matching recipe patterns"))) (if package-build-badge-data (progn (package-build--write-badge-image name version package-build-archive-dir)))))))
  (let ((x0 rcp) (process-environment (copy-sequence process-environment))) (progn (ignore (eieio-object-p x0)) (let* ((x139 (eieio-oref x0 'name)) (x140 (eieio-oref x0 'version)) (x141 (eieio-oref x0 'commit)) (x142 (eieio-oref x0 'revdesc))) (let ((name x139) (version x140) (commit x141) (revdesc x142)) (progn (package-build--checkout rcp) (setenv "PACKAGE_VERSION" version) (setenv "PACKAGE_REVISION" commit) (setenv "PACKAGE_REVDESC" revdesc) (let* ((s ...) (command ...)) (if command (progn ... ...))) (let* ((s ...) (targets ...)) (if targets (progn ... ...) nil)) (let* ((files ...)) (if files (funcall ... rcp files) (package-build--error rcp "Unable to find files matching recipe patterns"))) (if package-build-badge-data (progn (package-build--write-badge-image name version package-build-archive-dir))))))))
  (unwind-protect (let ((x0 rcp) (process-environment (copy-sequence process-environment))) (progn (ignore (eieio-object-p x0)) (let* ((x139 (eieio-oref x0 'name)) (x140 (eieio-oref x0 'version)) (x141 (eieio-oref x0 'commit)) (x142 (eieio-oref x0 'revdesc))) (let ((name x139) (version x140) (commit x141) (revdesc x142)) (progn (package-build--checkout rcp) (setenv "PACKAGE_VERSION" version) (setenv "PACKAGE_REVISION" commit) (setenv "PACKAGE_REVDESC" revdesc) (let* (... ...) (if command ...)) (let* (... ...) (if targets ... nil)) (let* (...) (if files ... ...)) (if package-build-badge-data (progn ...))))))) (package-build--cleanup rcp))
  (let ((default-directory (package-recipe--working-tree rcp))) (unwind-protect (let ((x0 rcp) (process-environment (copy-sequence process-environment))) (progn (ignore (eieio-object-p x0)) (let* ((x139 (eieio-oref x0 ...)) (x140 (eieio-oref x0 ...)) (x141 (eieio-oref x0 ...)) (x142 (eieio-oref x0 ...))) (let ((name x139) (version x140) (commit x141) (revdesc x142)) (progn (package-build--checkout rcp) (setenv "PACKAGE_VERSION" version) (setenv "PACKAGE_REVISION" commit) (setenv "PACKAGE_REVDESC" revdesc) (let* ... ...) (let* ... ...) (let* ... ...) (if package-build-badge-data ...)))))) (package-build--cleanup rcp)))
  package-build--package(#<package-codeberg-recipe package-codeberg-recipe-155c290fda42>)
  (progn (package-build--package rcp) (if dump-archive-contents (progn (package-build-dump-archive-contents))))
  (if version (progn (package-build--package rcp) (if dump-archive-contents (progn (package-build-dump-archive-contents)))))
  (if package-build--inhibit-update nil (package-build--select-version rcp) (setq version (eieio-oref rcp 'version)) (if version (progn (package-build--package rcp) (if dump-archive-contents (progn (package-build-dump-archive-contents))))) (if (not version) (message " ✗ Cannot determine version!") (message " ✓ Success:") (let ((--dolist-tail-- (directory-files-and-attributes package-build-archive-dir nil (format "\\`%s-[0-9]+" name)))) (while --dolist-tail-- (let ((x136 (car --dolist-tail--))) (progn (ignore (consp x136)) (let* (... ...) (let ... ...))) (setq --dolist-tail-- (cdr --dolist-tail--)))))))
  (let* ((start-time (current-time)) (rcp (package-recipe-lookup name)) (url (eieio-oref rcp 'url)) (repo (eieio-oref rcp 'repo)) (fetcher (package-recipe--fetcher rcp)) (version nil)) (cond ((not noninteractive) (message " • %s package %s (from %s)..." (if package-build--inhibit-update "Fetching" "Building") name (if repo (format "%s:%s" fetcher repo) url))) (package-build-verbose (message "Package: %s" name) (message "Fetcher: %s" fetcher) (message "Source:  %s\n" url))) (package-build--fetch rcp) (if package-build--inhibit-update nil (package-build--select-version rcp) (setq version (eieio-oref rcp 'version)) (if version (progn (package-build--package rcp) (if dump-archive-contents (progn (package-build-dump-archive-contents))))) (if (not version) (message " ✗ Cannot determine version!") (message " ✓ Success:") (let ((--dolist-tail-- (directory-files-and-attributes package-build-archive-dir nil (format "\\`%s-[0-9]+" name)))) (while --dolist-tail-- (let ((x136 ...)) (progn (ignore ...) (let* ... ...)) (setq --dolist-tail-- (cdr --dolist-tail--))))))) (message "%s %s in %.3fs, finished at %s" (if version "Built" "Fetched") name (float-time (time-since start-time)) (format-time-string "%FT%T%z" nil t)))
  package-build-archive("twtxt")
  command-line-1(("-L" "/mnt/store/melpa/package-build" "--eval" "(progn (setq package-build-stable nil) (setq packa..." "--eval" "(progn (setq package-build--melpa-base \"/mnt/store..." "--eval" "(setq package-build-timeout-secs 600)" "--eval" "()" "--load" "package-build.el" "--eval" "(package-build-archive \"twtxt\")"))
  command-line()
  normal-top-level()


Debugger entered--Lisp error: (cl-assertion-failed (plist-get plist :repo) (:fetcher github :url "https://github.com/chee/feline-mode"))
  cl--assertion-failed((plist-get plist :repo) nil ((:fetcher github :url "https://github.com/chee/feline-mode")) nil)
  (or (plist-get plist :repo) (cl--assertion-failed '(plist-get plist :repo) nil (list plist) (list)))
  (progn (or (plist-get plist :repo) (cl--assertion-failed '(plist-get plist :repo) nil (list plist) (list))) nil)
  (progn (progn (or (plist-get plist :repo) (cl--assertion-failed '(plist-get plist :repo) nil (list plist) (list))) nil) (progn (or (not (plist-get plist :url)) (cl--assertion-failed '(not (plist-get plist :url)) nil (list (plist-get plist :url)) (list))) nil))
  (if (memq fetcher package-recipe--forge-fetchers) (progn (progn (or (plist-get plist :repo) (cl--assertion-failed '(plist-get plist :repo) nil (list plist) (list))) nil) (progn (or (not (plist-get plist :url)) (cl--assertion-failed '(not (plist-get plist :url)) nil (list (plist-get plist :url)) (list))) nil)) (progn (or (plist-get plist :url) (cl--assertion-failed '(plist-get plist :url) nil (list plist) (list))) nil))
  (let ((fetcher (plist-get plist :fetcher))) (progn (or fetcher (cl--assertion-failed 'fetcher ":fetcher is missing" (list) (list))) nil) (if (memq fetcher package-recipe--forge-fetchers) (progn (progn (or (plist-get plist :repo) (cl--assertion-failed '(plist-get plist :repo) nil (list plist) (list))) nil) (progn (or (not (plist-get plist :url)) (cl--assertion-failed '(not ...) nil (list (plist-get plist :url)) (list))) nil)) (progn (or (plist-get plist :url) (cl--assertion-failed '(plist-get plist :url) nil (list plist) (list))) nil)))
  (let* ((symbol-keys '(:fetcher)) (string-keys '(:url :repo :commit :branch :version-regexp :shell-command)) (list-keys '(:files :make-targets :org-exports :old-names)) (all-keys (append symbol-keys string-keys list-keys))) (let ((--dolist-tail-- plist)) (while --dolist-tail-- (let ((thing (car --dolist-tail--))) (if (keywordp thing) (progn (progn (or ... ...) nil))) (setq --dolist-tail-- (cdr --dolist-tail--))))) (let ((fetcher (plist-get plist :fetcher))) (progn (or fetcher (cl--assertion-failed 'fetcher ":fetcher is missing" (list) (list))) nil) (if (memq fetcher package-recipe--forge-fetchers) (progn (progn (or (plist-get plist :repo) (cl--assertion-failed '... nil (list plist) (list))) nil) (progn (or (not (plist-get plist :url)) (cl--assertion-failed '... nil (list ...) (list))) nil)) (progn (or (plist-get plist :url) (cl--assertion-failed '(plist-get plist :url) nil (list plist) (list))) nil))) (let ((--dolist-tail-- symbol-keys)) (while --dolist-tail-- (let ((key (car --dolist-tail--))) (let* ((val (and t ...))) (if val (progn (or ... ...) nil) nil)) (setq --dolist-tail-- (cdr --dolist-tail--))))) (let ((--dolist-tail-- list-keys)) (while --dolist-tail-- (let ((key (car --dolist-tail--))) (let* ((val (and t ...))) (if val (progn (or ... ...) nil) nil)) (setq --dolist-tail-- (cdr --dolist-tail--))))) (let ((--dolist-tail-- string-keys)) (while --dolist-tail-- (let ((key (car --dolist-tail--))) (let* ((val (and t ...))) (if val (progn (or ... ...) nil) nil)) (setq --dolist-tail-- (cdr --dolist-tail--))))) (let* ((spec (and t (plist-get plist :files)))) (if spec (progn (if (eq (car spec) :defaults) (progn (setq spec (cdr spec)))) (let ((--dolist-tail-- spec)) (while --dolist-tail-- (let (...) (if ... nil ...) (setq --dolist-tail-- ...))))) nil)) (list name ident all-keys))
  (progn (progn (or ident (cl--assertion-failed 'ident)) nil) (progn (or (symbolp ident) (cl--assertion-failed '(symbolp ident))) nil) (progn (or (string= (symbol-name ident) name) (cl--assertion-failed '(string= (symbol-name ident) name) "Recipe '%s' contains mismatched package name '%s'" (list) (list name ident))) nil) (progn (or plist (cl--assertion-failed 'plist)) nil) (let* ((symbol-keys '(:fetcher)) (string-keys '(:url :repo :commit :branch :version-regexp :shell-command)) (list-keys '(:files :make-targets :org-exports :old-names)) (all-keys (append symbol-keys string-keys list-keys))) (let ((--dolist-tail-- plist)) (while --dolist-tail-- (let ((thing (car --dolist-tail--))) (if (keywordp thing) (progn (progn ... nil))) (setq --dolist-tail-- (cdr --dolist-tail--))))) (let ((fetcher (plist-get plist :fetcher))) (progn (or fetcher (cl--assertion-failed 'fetcher ":fetcher is missing" (list) (list))) nil) (if (memq fetcher package-recipe--forge-fetchers) (progn (progn (or (plist-get plist :repo) (cl--assertion-failed ... nil ... ...)) nil) (progn (or (not ...) (cl--assertion-failed ... nil ... ...)) nil)) (progn (or (plist-get plist :url) (cl--assertion-failed '... nil (list plist) (list))) nil))) (let ((--dolist-tail-- symbol-keys)) (while --dolist-tail-- (let ((key (car --dolist-tail--))) (let* ((val ...)) (if val (progn ... nil) nil)) (setq --dolist-tail-- (cdr --dolist-tail--))))) (let ((--dolist-tail-- list-keys)) (while --dolist-tail-- (let ((key (car --dolist-tail--))) (let* ((val ...)) (if val (progn ... nil) nil)) (setq --dolist-tail-- (cdr --dolist-tail--))))) (let ((--dolist-tail-- string-keys)) (while --dolist-tail-- (let ((key (car --dolist-tail--))) (let* ((val ...)) (if val (progn ... nil) nil)) (setq --dolist-tail-- (cdr --dolist-tail--))))) (let* ((spec (and t (plist-get plist :files)))) (if spec (progn (if (eq (car spec) :defaults) (progn (setq spec ...))) (let ((--dolist-tail-- spec)) (while --dolist-tail-- (let ... ... ...)))) nil)) (list name ident all-keys)) recipe)
  (let ((ident x0) (plist x1)) (progn (progn (or ident (cl--assertion-failed 'ident)) nil) (progn (or (symbolp ident) (cl--assertion-failed '(symbolp ident))) nil) (progn (or (string= (symbol-name ident) name) (cl--assertion-failed '(string= (symbol-name ident) name) "Recipe '%s' contains mismatched package name '%s'" (list) (list name ident))) nil) (progn (or plist (cl--assertion-failed 'plist)) nil) (let* ((symbol-keys '(:fetcher)) (string-keys '(:url :repo :commit :branch :version-regexp :shell-command)) (list-keys '(:files :make-targets :org-exports :old-names)) (all-keys (append symbol-keys string-keys list-keys))) (let ((--dolist-tail-- plist)) (while --dolist-tail-- (let ((thing ...)) (if (keywordp thing) (progn ...)) (setq --dolist-tail-- (cdr --dolist-tail--))))) (let ((fetcher (plist-get plist :fetcher))) (progn (or fetcher (cl--assertion-failed 'fetcher ":fetcher is missing" (list) (list))) nil) (if (memq fetcher package-recipe--forge-fetchers) (progn (progn (or ... ...) nil) (progn (or ... ...) nil)) (progn (or (plist-get plist :url) (cl--assertion-failed ... nil ... ...)) nil))) (let ((--dolist-tail-- symbol-keys)) (while --dolist-tail-- (let ((key ...)) (let* (...) (if val ... nil)) (setq --dolist-tail-- (cdr --dolist-tail--))))) (let ((--dolist-tail-- list-keys)) (while --dolist-tail-- (let ((key ...)) (let* (...) (if val ... nil)) (setq --dolist-tail-- (cdr --dolist-tail--))))) (let ((--dolist-tail-- string-keys)) (while --dolist-tail-- (let ((key ...)) (let* (...) (if val ... nil)) (setq --dolist-tail-- (cdr --dolist-tail--))))) (let* ((spec (and t (plist-get plist :files)))) (if spec (progn (if (eq ... :defaults) (progn ...)) (let (...) (while --dolist-tail-- ...))) nil)) (list name ident all-keys)) recipe))
  (let* ((x0 (car-safe recipe)) (x1 (cdr-safe recipe))) (let ((ident x0) (plist x1)) (progn (progn (or ident (cl--assertion-failed 'ident)) nil) (progn (or (symbolp ident) (cl--assertion-failed '(symbolp ident))) nil) (progn (or (string= (symbol-name ident) name) (cl--assertion-failed '(string= ... name) "Recipe '%s' contains mismatched package name '%s'" (list) (list name ident))) nil) (progn (or plist (cl--assertion-failed 'plist)) nil) (let* ((symbol-keys '(:fetcher)) (string-keys '(:url :repo :commit :branch :version-regexp :shell-command)) (list-keys '(:files :make-targets :org-exports :old-names)) (all-keys (append symbol-keys string-keys list-keys))) (let ((--dolist-tail-- plist)) (while --dolist-tail-- (let (...) (if ... ...) (setq --dolist-tail-- ...)))) (let ((fetcher (plist-get plist :fetcher))) (progn (or fetcher (cl--assertion-failed ... ":fetcher is missing" ... ...)) nil) (if (memq fetcher package-recipe--forge-fetchers) (progn (progn ... nil) (progn ... nil)) (progn (or ... ...) nil))) (let ((--dolist-tail-- symbol-keys)) (while --dolist-tail-- (let (...) (let* ... ...) (setq --dolist-tail-- ...)))) (let ((--dolist-tail-- list-keys)) (while --dolist-tail-- (let (...) (let* ... ...) (setq --dolist-tail-- ...)))) (let ((--dolist-tail-- string-keys)) (while --dolist-tail-- (let (...) (let* ... ...) (setq --dolist-tail-- ...)))) (let* ((spec (and t ...))) (if spec (progn (if ... ...) (let ... ...)) nil)) (list name ident all-keys)) recipe)))
  (progn (ignore (consp recipe)) (let* ((x0 (car-safe recipe)) (x1 (cdr-safe recipe))) (let ((ident x0) (plist x1)) (progn (progn (or ident (cl--assertion-failed 'ident)) nil) (progn (or (symbolp ident) (cl--assertion-failed '...)) nil) (progn (or (string= (symbol-name ident) name) (cl--assertion-failed '... "Recipe '%s' contains mismatched package name '%s'" (list) (list name ident))) nil) (progn (or plist (cl--assertion-failed 'plist)) nil) (let* ((symbol-keys '...) (string-keys '...) (list-keys '...) (all-keys (append symbol-keys string-keys list-keys))) (let ((--dolist-tail-- plist)) (while --dolist-tail-- (let ... ... ...))) (let ((fetcher ...)) (progn (or fetcher ...) nil) (if (memq fetcher package-recipe--forge-fetchers) (progn ... ...) (progn ... nil))) (let ((--dolist-tail-- symbol-keys)) (while --dolist-tail-- (let ... ... ...))) (let ((--dolist-tail-- list-keys)) (while --dolist-tail-- (let ... ... ...))) (let ((--dolist-tail-- string-keys)) (while --dolist-tail-- (let ... ... ...))) (let* ((spec ...)) (if spec (progn ... ...) nil)) (list name ident all-keys)) recipe))))
  package-recipe--validate((feline :fetcher github :url "https://github.com/chee/feline-mode") "feline")
  (let* ((recipe (let ((temp-buffer (generate-new-buffer " *temp*" t))) (save-current-buffer (set-buffer temp-buffer) (unwind-protect (progn (insert-file-contents file) (read ...)) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))))) (plist (cdr recipe)) (fetcher (plist-get plist :fetcher)) key val args rcp) (package-recipe--validate recipe name) (while (setq key (car-safe (prog1 plist (setq plist (cdr plist))))) (setq val (car-safe (prog1 plist (setq plist (cdr plist))))) (if (eq key :fetcher) nil (setq args (cons val args)) (setq args (cons key args)))) (if (and package-build-use-git-remote-hg (eq fetcher 'hg)) (progn (setq fetcher 'git-remote-hg) (setq args (plist-put args :url (concat "hg::" (eieio-oref rcp 'url)))))) (setq rcp (apply (intern (format "package-%s-recipe" fetcher)) name :name name args)) (if (eieio-oref rcp 'url) nil (eieio-oset rcp 'url (format (eieio-oref rcp 'url-format) (eieio-oref rcp 'repo)))) rcp)
  (if (file-exists-p file) (let* ((recipe (let ((temp-buffer (generate-new-buffer " *temp*" t))) (save-current-buffer (set-buffer temp-buffer) (unwind-protect (progn ... ...) (and ... ...))))) (plist (cdr recipe)) (fetcher (plist-get plist :fetcher)) key val args rcp) (package-recipe--validate recipe name) (while (setq key (car-safe (prog1 plist (setq plist (cdr plist))))) (setq val (car-safe (prog1 plist (setq plist (cdr plist))))) (if (eq key :fetcher) nil (setq args (cons val args)) (setq args (cons key args)))) (if (and package-build-use-git-remote-hg (eq fetcher 'hg)) (progn (setq fetcher 'git-remote-hg) (setq args (plist-put args :url (concat "hg::" (eieio-oref rcp ...)))))) (setq rcp (apply (intern (format "package-%s-recipe" fetcher)) name :name name args)) (if (eieio-oref rcp 'url) nil (eieio-oset rcp 'url (format (eieio-oref rcp 'url-format) (eieio-oref rcp 'repo)))) rcp) (error "No such recipe: %s" name))
  (let ((file (expand-file-name name package-build-recipes-dir))) (if (file-exists-p file) (let* ((recipe (let ((temp-buffer ...)) (save-current-buffer (set-buffer temp-buffer) (unwind-protect ... ...)))) (plist (cdr recipe)) (fetcher (plist-get plist :fetcher)) key val args rcp) (package-recipe--validate recipe name) (while (setq key (car-safe (prog1 plist (setq plist ...)))) (setq val (car-safe (prog1 plist (setq plist ...)))) (if (eq key :fetcher) nil (setq args (cons val args)) (setq args (cons key args)))) (if (and package-build-use-git-remote-hg (eq fetcher 'hg)) (progn (setq fetcher 'git-remote-hg) (setq args (plist-put args :url (concat "hg::" ...))))) (setq rcp (apply (intern (format "package-%s-recipe" fetcher)) name :name name args)) (if (eieio-oref rcp 'url) nil (eieio-oset rcp 'url (format (eieio-oref rcp 'url-format) (eieio-oref rcp 'repo)))) rcp) (error "No such recipe: %s" name)))
  package-recipe-lookup("feline")
  (let* ((start-time (current-time)) (rcp (package-recipe-lookup name)) (url (eieio-oref rcp 'url)) (repo (eieio-oref rcp 'repo)) (fetcher (package-recipe--fetcher rcp)) (version nil)) (cond ((not noninteractive) (message " • %s package %s (from %s)..." (if package-build--inhibit-update "Fetching" "Building") name (if repo (format "%s:%s" fetcher repo) url))) (package-build-verbose (message "Package: %s" name) (message "Fetcher: %s" fetcher) (message "Source:  %s\n" url))) (package-build--fetch rcp) (if package-build--inhibit-update nil (package-build--select-version rcp) (setq version (eieio-oref rcp 'version)) (if version (progn (package-build--package rcp) (if dump-archive-contents (progn (package-build-dump-archive-contents))))) (if (not version) (message " ✗ Cannot determine version!") (message " ✓ Success:") (let ((--dolist-tail-- (directory-files-and-attributes package-build-archive-dir nil (format "\\`%s-[0-9]+" name)))) (while --dolist-tail-- (let ((x136 ...)) (progn (ignore ...) (let* ... ...)) (setq --dolist-tail-- (cdr --dolist-tail--))))))) (message "%s %s in %.3fs, finished at %s" (if version "Built" "Fetched") name (float-time (time-since start-time)) (format-time-string "%FT%T%z" nil t)))
  package-build-archive("feline")
  command-line-1(("-L" "/mnt/store/melpa/package-build" "--eval" "(progn (setq package-build-stable nil) (setq packa..." "--eval" "(progn (setq package-build--melpa-base \"/mnt/store..." "--eval" "(setq package-build-timeout-secs 600)" "--eval" "()" "--load" "package-build.el" "--eval" "(package-build-archive \"feline\")"))
  command-line()
  normal-top-level()


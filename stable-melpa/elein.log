Package: elein
Fetcher: github
Source:  https://github.com/remvee/elein

Updating /mnt/store/melpa/working/elein/
Debugger entered--Lisp error: (wrong-type-argument stringp nil)
  split-string(nil " ")
  (let* ((val (split-string (car (apply #'process-lines "git" "log" "-n1" "--first-parent" "--no-show-signature" "--pretty=format:%H %cd" "--date=unix" rev (and (not exact) (cons "--" ...)))) " "))) (progn (ignore (consp val)) (let* ((x10 (car-safe val)) (x11 (cdr-safe val))) (progn (ignore (consp x11)) (let* ((x12 (car-safe x11)) (x13 (cdr-safe x11))) (progn (ignore (null x13)) (let (... ...) (list hash ...))))))))
  (progn (let* ((val (split-string (car (apply #'process-lines "git" "log" "-n1" "--first-parent" "--no-show-signature" "--pretty=format:%H %cd" "--date=unix" rev (and ... ...))) " "))) (progn (ignore (consp val)) (let* ((x10 (car-safe val)) (x11 (cdr-safe val))) (progn (ignore (consp x11)) (let* ((x12 ...) (x13 ...)) (progn (ignore ...) (let ... ...))))))))
  (closure (t) (rcp rev exact) (progn (let* ((val (split-string (car ...) " "))) (progn (ignore (consp val)) (let* ((x10 ...) (x11 ...)) (progn (ignore ...) (let* ... ...)))))))(#<package-github-recipe package-github-recipe-159356420a42> "origin/HEAD" nil)
  apply((closure (t) (rcp rev exact) (progn (let* ((val (split-string (car ...) " "))) (progn (ignore (consp val)) (let* ((x10 ...) (x11 ...)) (progn (ignore ...) (let* ... ...))))))) #<package-github-recipe package-github-recipe-159356420a42> ("origin/HEAD" nil))
  package-build--select-commit(#<package-github-recipe package-github-recipe-159356420a42> "origin/HEAD" nil)
  (let* ((branch (and branch (concat "origin/" branch))) (rev (or commit branch "origin/HEAD")) (val (package-build--select-commit rcp rev commit))) (progn (ignore (consp val)) (let* ((x37 (car-safe val)) (x38 (cdr-safe val))) (progn (ignore (consp x38)) (let* ((x39 (car-safe x38)) (x40 (cdr-safe x38))) (progn (ignore (null x40)) (let (... ...) (let* ... ...))))))))
  (let ((commit x41) (branch x42)) (let* ((branch (and branch (concat "origin/" branch))) (rev (or commit branch "origin/HEAD")) (val (package-build--select-commit rcp rev commit))) (progn (ignore (consp val)) (let* ((x37 (car-safe val)) (x38 (cdr-safe val))) (progn (ignore (consp x38)) (let* ((x39 ...) (x40 ...)) (progn (ignore ...) (let ... ...))))))))
  (let* ((x41 (eieio-oref rcp 'commit)) (x42 (eieio-oref rcp 'branch))) (let ((commit x41) (branch x42)) (let* ((branch (and branch (concat "origin/" branch))) (rev (or commit branch "origin/HEAD")) (val (package-build--select-commit rcp rev commit))) (progn (ignore (consp val)) (let* ((x37 (car-safe val)) (x38 (cdr-safe val))) (progn (ignore (consp x38)) (let* (... ...) (progn ... ...))))))))
  (progn (ignore (eieio-object-p rcp)) (let* ((x41 (eieio-oref rcp 'commit)) (x42 (eieio-oref rcp 'branch))) (let ((commit x41) (branch x42)) (let* ((branch (and branch (concat "origin/" branch))) (rev (or commit branch "origin/HEAD")) (val (package-build--select-commit rcp rev commit))) (progn (ignore (consp val)) (let* ((x37 ...) (x38 ...)) (progn (ignore ...) (let* ... ...))))))))
  (progn (progn (ignore (eieio-object-p rcp)) (let* ((x41 (eieio-oref rcp 'commit)) (x42 (eieio-oref rcp 'branch))) (let ((commit x41) (branch x42)) (let* ((branch (and branch ...)) (rev (or commit branch "origin/HEAD")) (val (package-build--select-commit rcp rev commit))) (progn (ignore (consp val)) (let* (... ...) (progn ... ...))))))))
  (closure (t) (rcp) (progn (progn (ignore (eieio-object-p rcp)) (let* ((x41 (eieio-oref rcp ...)) (x42 (eieio-oref rcp ...))) (let ((commit x41) (branch x42)) (let* (... ... ...) (progn ... ...)))))))(#<package-github-recipe package-github-recipe-159356420a42>)
  apply((closure (t) (rcp) (progn (progn (ignore (eieio-object-p rcp)) (let* ((x41 (eieio-oref rcp ...)) (x42 (eieio-oref rcp ...))) (let ((commit x41) (branch x42)) (let* (... ... ...) (progn ... ...))))))) #<package-github-recipe package-github-recipe-159356420a42> nil)
  package-build--timestamp-version(#<package-github-recipe package-github-recipe-159356420a42>)
  (let* ((val (package-build--timestamp-version rcp))) (progn (ignore (consp val)) (let* ((x29 (car-safe val)) (x30 (cdr-safe val))) (progn (ignore (consp x30)) (let* ((x31 (car-safe x30)) (x32 (cdr-safe x30))) (progn (ignore (null x32)) (let (... ...) (list hash time ... ...))))))))
  package-build-timestamp-version(#<package-github-recipe package-github-recipe-159356420a42>)
  run-hook-with-args-until-success(package-build-timestamp-version #<package-github-recipe package-github-recipe-159356420a42>)
  (cond ((with-no-warnings package-build-get-version-function) (display-warning 'package-build "Variable `package-build-get-version-function' is o...") (with-no-warnings (funcall package-build-get-version-function rcp))) (package-build-stable (run-hook-with-args-until-success 'package-build-release-version-functions rcp)) ((run-hook-with-args-until-success 'package-build-snapshot-version-functions rcp)))
  (let* ((default-directory (package-recipe--working-tree rcp)) (val (cond ((with-no-warnings package-build-get-version-function) (display-warning 'package-build "Variable `package-build-get-version-function' is o...") (with-no-warnings (funcall package-build-get-version-function rcp))) (package-build-stable (run-hook-with-args-until-success 'package-build-release-version-functions rcp)) ((run-hook-with-args-until-success 'package-build-snapshot-version-functions rcp))))) (progn (ignore (consp val)) (let* ((x2 (car-safe val)) (x3 (cdr-safe val))) (progn (ignore (consp x3)) (let* ((x4 (car-safe x3)) (x5 (cdr-safe x3))) (progn (ignore (consp x5)) (let* (... ...) (progn ... ...))))))))
  package-build--select-version(#<package-github-recipe package-github-recipe-159356420a42>)
  (if package-build--inhibit-update nil (package-build--select-version rcp) (setq version (eieio-oref rcp 'version)) (if version (progn (package-build--package rcp) (if dump-archive-contents (progn (package-build-dump-archive-contents))))) (if (not version) (message " ✗ Cannot determine version!") (message " ✓ Success:") (let ((--dolist-tail-- (directory-files-and-attributes package-build-archive-dir nil (format "\\`%s-[0-9]+" name)))) (while --dolist-tail-- (let ((x136 (car --dolist-tail--))) (progn (ignore (consp x136)) (let* (... ...) (let ... ...))) (setq --dolist-tail-- (cdr --dolist-tail--)))))))
  (let* ((start-time (current-time)) (rcp (package-recipe-lookup name)) (url (eieio-oref rcp 'url)) (repo (eieio-oref rcp 'repo)) (fetcher (package-recipe--fetcher rcp)) (version nil)) (cond ((not noninteractive) (message " • %s package %s (from %s)..." (if package-build--inhibit-update "Fetching" "Building") name (if repo (format "%s:%s" fetcher repo) url))) (package-build-verbose (message "Package: %s" name) (message "Fetcher: %s" fetcher) (message "Source:  %s\n" url))) (package-build--fetch rcp) (if package-build--inhibit-update nil (package-build--select-version rcp) (setq version (eieio-oref rcp 'version)) (if version (progn (package-build--package rcp) (if dump-archive-contents (progn (package-build-dump-archive-contents))))) (if (not version) (message " ✗ Cannot determine version!") (message " ✓ Success:") (let ((--dolist-tail-- (directory-files-and-attributes package-build-archive-dir nil (format "\\`%s-[0-9]+" name)))) (while --dolist-tail-- (let ((x136 ...)) (progn (ignore ...) (let* ... ...)) (setq --dolist-tail-- (cdr --dolist-tail--))))))) (message "%s %s in %.3fs, finished at %s" (if version "Built" "Fetched") name (float-time (time-since start-time)) (format-time-string "%FT%T%z" nil t)))
  package-build-archive("elein")
  command-line-1(("-L" "/mnt/store/melpa/package-build" "--eval" "(progn (setq package-build-stable nil) (setq packa..." "--eval" "(progn (setq package-build--melpa-base \"/mnt/store..." "--eval" "(setq package-build-timeout-secs 600)" "--eval" "()" "--load" "package-build.el" "--eval" "(package-build-archive \"elein\")"))
  command-line()
  normal-top-level()


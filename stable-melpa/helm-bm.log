Package: helm-bm
Fetcher: github
Source:  https://github.com/emacs-helm/helm-bm.git

Updating /mnt/store/melpa/working/helm-bm/
Checking out 6f8c9af37c0ae1114f6e284f9560fb94170ed297
Debugger entered--Lisp error: (scan-error "Unbalanced parentheses" 19 38)
  scan-sexps(19 1)
  forward-sexp(1)
  mail-header-parse-address("Thierry Volpiatto <thievol@posteo.net")
  #f(compiled-function (elem) #<bytecode 0x16896dc1e6cb8a8>)("Thierry Volpiatto <thievol@posteo.net")
  mapcar(#f(compiled-function (elem) #<bytecode 0x16896dc1e6cb8a8>) ("Thierry Volpiatto <thievol@posteo.net"))
  mail-header-parse-addresses-lax("Thierry Volpiatto <thievol@posteo.net")
  lm-crack-address("Thierry Volpiatto <thievol@posteo.net")
  mapcan(lm-crack-address ("Thierry Volpiatto <thievol@posteo.net"))
  lm-maintainers()
  (if (fboundp 'lm-maintainers) (lm-maintainers) (with-no-warnings (let* ((maintainer (and t (lm-maintainer)))) (if maintainer (progn (list maintainer))))))
  (setq maintainers (if (fboundp 'lm-maintainers) (lm-maintainers) (with-no-warnings (let* ((maintainer (and t (lm-maintainer)))) (if maintainer (progn (list maintainer)))))))
  (progn (insert-file-contents file) (setq maintainers (if (fboundp 'lm-maintainers) (lm-maintainers) (with-no-warnings (let* ((maintainer (and t ...))) (if maintainer (progn (list maintainer))))))) (package-desc-from-define name version (or (save-excursion (goto-char (point-min)) (and (re-search-forward "^;;; [^ ]*\\.el ---[ \11]*\\(.*?\\)[ \11]*\\(-\\*-.*-\\*-[ \11..." nil t) (match-string-no-properties 1))) "No description available.") (cond ((fboundp 'lm-package-requires) (lm-package-requires)) ((fboundp 'package--prepare-dependencies) (let* ((require-lines (and t ...))) (if require-lines (progn (package--prepare-dependencies ...)))))) :kind (or kind 'single) :url (lm-homepage) :keywords (lm-keywords-list) :maintainer (car maintainers) :maintainers maintainers :authors (lm-authors) :commit commit))
  (unwind-protect (progn (insert-file-contents file) (setq maintainers (if (fboundp 'lm-maintainers) (lm-maintainers) (with-no-warnings (let* ((maintainer ...)) (if maintainer (progn ...)))))) (package-desc-from-define name version (or (save-excursion (goto-char (point-min)) (and (re-search-forward "^;;; [^ ]*\\.el ---[ \11]*\\(.*?\\)[ \11]*\\(-\\*-.*-\\*-[ \11..." nil t) (match-string-no-properties 1))) "No description available.") (cond ((fboundp 'lm-package-requires) (lm-package-requires)) ((fboundp 'package--prepare-dependencies) (let* ((require-lines ...)) (if require-lines (progn ...))))) :kind (or kind 'single) :url (lm-homepage) :keywords (lm-keywords-list) :maintainer (car maintainers) :maintainers maintainers :authors (lm-authors) :commit commit)) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))
  (save-current-buffer (set-buffer temp-buffer) (unwind-protect (progn (insert-file-contents file) (setq maintainers (if (fboundp 'lm-maintainers) (lm-maintainers) (with-no-warnings (let* (...) (if maintainer ...))))) (package-desc-from-define name version (or (save-excursion (goto-char (point-min)) (and (re-search-forward "^;;; [^ ]*\\.el ---[ \11]*\\(.*?\\)[ \11]*\\(-\\*-.*-\\*-[ \11..." nil t) (match-string-no-properties 1))) "No description available.") (cond ((fboundp 'lm-package-requires) (lm-package-requires)) ((fboundp 'package--prepare-dependencies) (let* (...) (if require-lines ...)))) :kind (or kind 'single) :url (lm-homepage) :keywords (lm-keywords-list) :maintainer (car maintainers) :maintainers maintainers :authors (lm-authors) :commit commit)) (and (buffer-name temp-buffer) (kill-buffer temp-buffer))))
  (let ((temp-buffer (generate-new-buffer " *temp*" t))) (save-current-buffer (set-buffer temp-buffer) (unwind-protect (progn (insert-file-contents file) (setq maintainers (if (fboundp 'lm-maintainers) (lm-maintainers) (with-no-warnings (let* ... ...)))) (package-desc-from-define name version (or (save-excursion (goto-char ...) (and ... ...)) "No description available.") (cond ((fboundp ...) (lm-package-requires)) ((fboundp ...) (let* ... ...))) :kind (or kind 'single) :url (lm-homepage) :keywords (lm-keywords-list) :maintainer (car maintainers) :maintainers maintainers :authors (lm-authors) :commit commit)) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))))
  (and (file-exists-p file) (let ((temp-buffer (generate-new-buffer " *temp*" t))) (save-current-buffer (set-buffer temp-buffer) (unwind-protect (progn (insert-file-contents file) (setq maintainers (if (fboundp ...) (lm-maintainers) (with-no-warnings ...))) (package-desc-from-define name version (or (save-excursion ... ...) "No description available.") (cond (... ...) (... ...)) :kind (or kind 'single) :url (lm-homepage) :keywords (lm-keywords-list) :maintainer (car maintainers) :maintainers maintainers :authors (lm-authors) :commit commit)) (and (buffer-name temp-buffer) (kill-buffer temp-buffer))))))
  (let* ((name (eieio-oref rcp 'name)) (version (eieio-oref rcp 'version)) (commit (eieio-oref rcp 'commit)) (file (concat name ".el")) (file (or (car (rassoc file files)) file)) (maintainers nil)) (and (file-exists-p file) (let ((temp-buffer (generate-new-buffer " *temp*" t))) (save-current-buffer (set-buffer temp-buffer) (unwind-protect (progn (insert-file-contents file) (setq maintainers (if ... ... ...)) (package-desc-from-define name version (or ... "No description available.") (cond ... ...) :kind (or kind ...) :url (lm-homepage) :keywords (lm-keywords-list) :maintainer (car maintainers) :maintainers maintainers :authors (lm-authors) :commit commit)) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))))))
  package-build--desc-from-library(#<package-github-recipe package-github-recipe-15940cfcc794> (("helm-bm.el" . "helm-bm.el")) tar)
  (or (package-build--desc-from-package rcp files) (package-build--desc-from-library rcp files 'tar) (package-build--error name "%s[-pkg].el matching package name is missing" name))
  (let* ((target (expand-file-name (concat name "-" version) tmp-dir)) (desc (or (package-build--desc-from-package rcp files) (package-build--desc-from-library rcp files 'tar) (package-build--error name "%s[-pkg].el matching package name is missing" name)))) (package-build--copy-package-files files target) (package-build--write-pkg-file desc target) (package-build--generate-info-files rcp files target) (package-build--create-tar rcp tmp-dir) (package-build--write-pkg-readme rcp files) (package-build--write-archive-entry desc))
  (unwind-protect (let* ((target (expand-file-name (concat name "-" version) tmp-dir)) (desc (or (package-build--desc-from-package rcp files) (package-build--desc-from-library rcp files 'tar) (package-build--error name "%s[-pkg].el matching package name is missing" name)))) (package-build--copy-package-files files target) (package-build--write-pkg-file desc target) (package-build--generate-info-files rcp files target) (package-build--create-tar rcp tmp-dir) (package-build--write-pkg-readme rcp files) (package-build--write-archive-entry desc)) (delete-directory tmp-dir t nil))
  (let* ((name (eieio-oref rcp 'name)) (version (eieio-oref rcp 'version)) (tmp-dir (file-name-as-directory (make-temp-file name t)))) (unwind-protect (let* ((target (expand-file-name (concat name "-" version) tmp-dir)) (desc (or (package-build--desc-from-package rcp files) (package-build--desc-from-library rcp files 'tar) (package-build--error name "%s[-pkg].el matching package name is missing" name)))) (package-build--copy-package-files files target) (package-build--write-pkg-file desc target) (package-build--generate-info-files rcp files target) (package-build--create-tar rcp tmp-dir) (package-build--write-pkg-readme rcp files) (package-build--write-archive-entry desc)) (delete-directory tmp-dir t nil)))
  package-build--build-multi-file-package(#<package-github-recipe package-github-recipe-15940cfcc794> (("helm-bm.el" . "helm-bm.el")))
  funcall(package-build--build-multi-file-package #<package-github-recipe package-github-recipe-15940cfcc794> (("helm-bm.el" . "helm-bm.el")))
  (cond ((= (length files) 0) (package-build--error rcp "Unable to find files matching recipe patterns")) (package-build-build-function (funcall package-build-build-function rcp files)) ((= (length files) 1) (package-build--build-single-file-package rcp files)) (t (package-build--build-multi-file-package rcp files)))
  (let ((files (package-build-expand-files-spec rcp t))) (cond ((= (length files) 0) (package-build--error rcp "Unable to find files matching recipe patterns")) (package-build-build-function (funcall package-build-build-function rcp files)) ((= (length files) 1) (package-build--build-single-file-package rcp files)) (t (package-build--build-multi-file-package rcp files))) (if package-build-badge-data (progn (package-build--write-badge-image (eieio-oref rcp 'name) (eieio-oref rcp 'version) package-build-archive-dir))))
  (progn (funcall package-build-checkout-function rcp) (let ((files (package-build-expand-files-spec rcp t))) (cond ((= (length files) 0) (package-build--error rcp "Unable to find files matching recipe patterns")) (package-build-build-function (funcall package-build-build-function rcp files)) ((= (length files) 1) (package-build--build-single-file-package rcp files)) (t (package-build--build-multi-file-package rcp files))) (if package-build-badge-data (progn (package-build--write-badge-image (eieio-oref rcp 'name) (eieio-oref rcp 'version) package-build-archive-dir)))))
  (unwind-protect (progn (funcall package-build-checkout-function rcp) (let ((files (package-build-expand-files-spec rcp t))) (cond ((= (length files) 0) (package-build--error rcp "Unable to find files matching recipe patterns")) (package-build-build-function (funcall package-build-build-function rcp files)) ((= (length files) 1) (package-build--build-single-file-package rcp files)) (t (package-build--build-multi-file-package rcp files))) (if package-build-badge-data (progn (package-build--write-badge-image (eieio-oref rcp 'name) (eieio-oref rcp 'version) package-build-archive-dir))))) (funcall package-build-cleanup-function rcp))
  (let ((default-directory (package-build--working-tree rcp))) (unwind-protect (progn (funcall package-build-checkout-function rcp) (let ((files (package-build-expand-files-spec rcp t))) (cond ((= (length files) 0) (package-build--error rcp "Unable to find files matching recipe patterns")) (package-build-build-function (funcall package-build-build-function rcp files)) ((= (length files) 1) (package-build--build-single-file-package rcp files)) (t (package-build--build-multi-file-package rcp files))) (if package-build-badge-data (progn (package-build--write-badge-image (eieio-oref rcp ...) (eieio-oref rcp ...) package-build-archive-dir))))) (funcall package-build-cleanup-function rcp)))
  package-build--package(#<package-github-recipe package-github-recipe-15940cfcc794>)
  (progn (package-build--package rcp) (if dump-archive-contents (progn (package-build-dump-archive-contents))))
  (if version (progn (package-build--package rcp) (if dump-archive-contents (progn (package-build-dump-archive-contents)))))
  (if package-build--inhibit-build nil (package-build--select-version rcp) (setq version (eieio-oref rcp 'version)) (if version (progn (package-build--package rcp) (if dump-archive-contents (progn (package-build-dump-archive-contents))))) (if (not version) (message " ✗ Cannot determine version!") (message " ✓ Success:") (let ((--dolist-tail-- (directory-files-and-attributes package-build-archive-dir nil (format "\\`%s-[0-9]+" name)))) (while --dolist-tail-- (let ((x95 (car --dolist-tail--))) (progn (ignore (consp x95)) (let* (... ...) (let ... ...))) (setq --dolist-tail-- (cdr --dolist-tail--)))))))
  (let* ((start-time (current-time)) (rcp (package-recipe-lookup name)) (url (package-recipe--upstream-url rcp)) (repo (eieio-oref rcp 'repo)) (fetcher (package-recipe--fetcher rcp)) (version nil)) (cond ((not noninteractive) (message " • %s package %s (from %s)..." (if package-build--inhibit-build "Fetching" "Building") name (if repo (format "%s:%s" fetcher repo) url))) (package-build-verbose (message "Package: %s" name) (message "Fetcher: %s" fetcher) (message "Source:  %s\n" url))) (funcall package-build-fetch-function rcp) (if package-build--inhibit-build nil (package-build--select-version rcp) (setq version (eieio-oref rcp 'version)) (if version (progn (package-build--package rcp) (if dump-archive-contents (progn (package-build-dump-archive-contents))))) (if (not version) (message " ✗ Cannot determine version!") (message " ✓ Success:") (let ((--dolist-tail-- (directory-files-and-attributes package-build-archive-dir nil (format "\\`%s-[0-9]+" name)))) (while --dolist-tail-- (let ((x95 ...)) (progn (ignore ...) (let* ... ...)) (setq --dolist-tail-- (cdr --dolist-tail--))))))) (message "%s %s in %.3fs, finished at %s" (if version "Built" "Fetched") name (float-time (time-since start-time)) (format-time-string "%FT%T%z" nil t)))
  package-build-archive("helm-bm")
  command-line-1(("-L" "/mnt/store/melpa/package-build" "--eval" "(progn (setq package-build-stable nil) (setq packa..." "--eval" "(progn (setq package-build--melpa-base \"/mnt/store..." "--eval" "(setq package-build-timeout-secs 600)" "--eval" "()" "--load" "package-build.el" "--eval" "(package-build-archive \"helm-bm\")"))
  command-line()
  normal-top-level()


Package: devdocs
Fetcher: github
Source:  https://github.com/astoff/devdocs.el

Updating /mnt/store/melpa/working/devdocs/
Checking out 04a8793072f1fc7c23f115e2c7ee83ce669b6fa4
Copying files (->) and directories (=>)
  from /mnt/store/melpa/working/devdocs/
  to /tmp/devdocsA3de1M/devdocs-20241005.1321
    devdocs.el -> devdocs.el
Debugger entered--Lisp error: (wrong-type-argument symbolp "compat 29.1")
  symbol-name("compat 29.1")
  (length (symbol-name (car d)))
  (closure ((temp-buffer . #<buffer  *temp file*>) (temp-file . "/tmp/devdocsA3de1M/devdocs-20241005.1321/devdocs-p...") (dependencies (emacs "27.1") ("compat 29.1" "0")) (summary . "Emacs viewer for DevDocs") (version . "20241005.1321") (name . "devdocs") (x90 (emacs "27.1") ("compat 29.1" "0")) (x89 . "Emacs viewer for DevDocs") (x88 . "20241005.1321") (x87 . "devdocs") (dir . "/tmp/devdocsA3de1M/devdocs-20241005.1321") (rcp . #<package-github-recipe package-github-recipe-159158fd3f5c>) t) (d) (length (symbol-name (car d))))(("compat 29.1" "0"))
  mapcar((closure ((temp-buffer . #<buffer  *temp file*>) (temp-file . "/tmp/devdocsA3de1M/devdocs-20241005.1321/devdocs-p...") (dependencies (emacs "27.1") ("compat 29.1" "0")) (summary . "Emacs viewer for DevDocs") (version . "20241005.1321") (name . "devdocs") (x90 (emacs "27.1") ("compat 29.1" "0")) (x89 . "Emacs viewer for DevDocs") (x88 . "20241005.1321") (x87 . "devdocs") (dir . "/tmp/devdocsA3de1M/devdocs-20241005.1321") (rcp . #<package-github-recipe package-github-recipe-159158fd3f5c>) t) (d) (length (symbol-name (car d)))) ((emacs "27.1") ("compat 29.1" "0")))
  (apply #'max 0 (mapcar #'(lambda (d) (length (symbol-name (car d)))) dependencies))
  (format "(%%-%ds \"%%s\")" (apply #'max 0 (mapcar #'(lambda (d) (length (symbol-name (car d)))) dependencies)))
  (let ((format (format "(%%-%ds \"%%s\")" (apply #'max 0 (mapcar #'(lambda ... ...) dependencies))))) (insert "  '(" (mapconcat #'(lambda (arg0) (progn (ignore (consp arg0)) (let* (... ...) (progn ... ...)))) dependencies "\n    ") ")\n"))
  (if dependencies (let ((format (format "(%%-%ds \"%%s\")" (apply #'max 0 (mapcar #'... dependencies))))) (insert "  '(" (mapconcat #'(lambda (arg0) (progn (ignore ...) (let* ... ...))) dependencies "\n    ") ")\n")) (insert "  ()\n"))
  (save-current-buffer (set-buffer temp-buffer) (insert ";; -*- no-byte-compile: t; lexical-binding: nil -*...") (insert (format "(define-package \"%s\" \"%s\"\n" name version)) (insert (format "  %s\n" (prin1-to-string (concat summary ".")))) (if dependencies (let ((format (format "(%%-%ds \"%%s\")" (apply #'max 0 (mapcar ... dependencies))))) (insert "  '(" (mapconcat #'(lambda (arg0) (progn ... ...)) dependencies "\n    ") ")\n")) (insert "  ()\n")) (let ((--dolist-tail-- package-build--extras)) (while --dolist-tail-- (let ((x95 (car --dolist-tail--))) (progn (ignore (consp x95)) (let* ((x96 ...) (x97 ...)) (progn (ignore ...) (let* ... ...)))) (setq --dolist-tail-- (cdr --dolist-tail--))))) (delete-char -1) (insert ")\n"))
  (prog1 (save-current-buffer (set-buffer temp-buffer) (insert ";; -*- no-byte-compile: t; lexical-binding: nil -*...") (insert (format "(define-package \"%s\" \"%s\"\n" name version)) (insert (format "  %s\n" (prin1-to-string (concat summary ".")))) (if dependencies (let ((format (format "(%%-%ds \"%%s\")" (apply ... 0 ...)))) (insert "  '(" (mapconcat #'(lambda ... ...) dependencies "\n    ") ")\n")) (insert "  ()\n")) (let ((--dolist-tail-- package-build--extras)) (while --dolist-tail-- (let ((x95 (car --dolist-tail--))) (progn (ignore (consp x95)) (let* (... ...) (progn ... ...))) (setq --dolist-tail-- (cdr --dolist-tail--))))) (delete-char -1) (insert ")\n")) (save-current-buffer (set-buffer temp-buffer) (write-region nil nil temp-file nil 0)))
  (unwind-protect (prog1 (save-current-buffer (set-buffer temp-buffer) (insert ";; -*- no-byte-compile: t; lexical-binding: nil -*...") (insert (format "(define-package \"%s\" \"%s\"\n" name version)) (insert (format "  %s\n" (prin1-to-string (concat summary ".")))) (if dependencies (let ((format (format "(%%-%ds \"%%s\")" ...))) (insert "  '(" (mapconcat #'... dependencies "\n    ") ")\n")) (insert "  ()\n")) (let ((--dolist-tail-- package-build--extras)) (while --dolist-tail-- (let ((x95 ...)) (progn (ignore ...) (let* ... ...)) (setq --dolist-tail-- (cdr --dolist-tail--))))) (delete-char -1) (insert ")\n")) (save-current-buffer (set-buffer temp-buffer) (write-region nil nil temp-file nil 0))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))
  (let ((temp-file (expand-file-name (format "%s-pkg.el" name) dir)) (temp-buffer (generate-new-buffer " *temp file*" t))) (unwind-protect (prog1 (save-current-buffer (set-buffer temp-buffer) (insert ";; -*- no-byte-compile: t; lexical-binding: nil -*...") (insert (format "(define-package \"%s\" \"%s\"\n" name version)) (insert (format "  %s\n" (prin1-to-string (concat summary ".")))) (if dependencies (let ((format ...)) (insert "  '(" (mapconcat ... dependencies "\n    ") ")\n")) (insert "  ()\n")) (let ((--dolist-tail-- package-build--extras)) (while --dolist-tail-- (let (...) (progn ... ...) (setq --dolist-tail-- ...)))) (delete-char -1) (insert ")\n")) (save-current-buffer (set-buffer temp-buffer) (write-region nil nil temp-file nil 0))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer))))
  (let ((name x87) (version x88) (summary x89) (dependencies x90)) (let ((temp-file (expand-file-name (format "%s-pkg.el" name) dir)) (temp-buffer (generate-new-buffer " *temp file*" t))) (unwind-protect (prog1 (save-current-buffer (set-buffer temp-buffer) (insert ";; -*- no-byte-compile: t; lexical-binding: nil -*...") (insert (format "(define-package \"%s\" \"%s\"\n" name version)) (insert (format "  %s\n" (prin1-to-string ...))) (if dependencies (let (...) (insert "  '(" ... ")\n")) (insert "  ()\n")) (let ((--dolist-tail-- package-build--extras)) (while --dolist-tail-- (let ... ... ...))) (delete-char -1) (insert ")\n")) (save-current-buffer (set-buffer temp-buffer) (write-region nil nil temp-file nil 0))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))))
  (let* ((x87 (eieio-oref rcp 'name)) (x88 (eieio-oref rcp 'version)) (x89 (eieio-oref rcp 'summary)) (x90 (eieio-oref rcp 'dependencies))) (let ((name x87) (version x88) (summary x89) (dependencies x90)) (let ((temp-file (expand-file-name (format "%s-pkg.el" name) dir)) (temp-buffer (generate-new-buffer " *temp file*" t))) (unwind-protect (prog1 (save-current-buffer (set-buffer temp-buffer) (insert ";; -*- no-byte-compile: t; lexical-binding: nil -*...") (insert (format "(define-package \"%s\" \"%s\"\n" name version)) (insert (format "  %s\n" ...)) (if dependencies (let ... ...) (insert "  ()\n")) (let (...) (while --dolist-tail-- ...)) (delete-char -1) (insert ")\n")) (save-current-buffer (set-buffer temp-buffer) (write-region nil nil temp-file nil 0))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer))))))
  (progn (ignore (eieio-object-p rcp)) (let* ((x87 (eieio-oref rcp 'name)) (x88 (eieio-oref rcp 'version)) (x89 (eieio-oref rcp 'summary)) (x90 (eieio-oref rcp 'dependencies))) (let ((name x87) (version x88) (summary x89) (dependencies x90)) (let ((temp-file (expand-file-name (format "%s-pkg.el" name) dir)) (temp-buffer (generate-new-buffer " *temp file*" t))) (unwind-protect (prog1 (save-current-buffer (set-buffer temp-buffer) (insert ";; -*- no-byte-compile: t; lexical-binding: nil -*...") (insert ...) (insert ...) (if dependencies ... ...) (let ... ...) (delete-char -1) (insert ")\n")) (save-current-buffer (set-buffer temp-buffer) (write-region nil nil temp-file nil 0))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))))))
  package-build--write-pkg-file(#<package-github-recipe package-github-recipe-159158fd3f5c> "/tmp/devdocsA3de1M/devdocs-20241005.1321")
  (progn (package-build--copy-package-files files target) (package-build--set-version-headers rcp target) (package-build--write-pkg-file rcp target) (package-build--generate-info-files rcp files target) (package-build--create-tar rcp tmpdir) (package-build--write-pkg-readme rcp files))
  (unwind-protect (progn (package-build--copy-package-files files target) (package-build--set-version-headers rcp target) (package-build--write-pkg-file rcp target) (package-build--generate-info-files rcp files target) (package-build--create-tar rcp tmpdir) (package-build--write-pkg-readme rcp files)) (delete-directory tmpdir t nil))
  (if package-build--inhibit-build nil (unwind-protect (progn (package-build--copy-package-files files target) (package-build--set-version-headers rcp target) (package-build--write-pkg-file rcp target) (package-build--generate-info-files rcp files target) (package-build--create-tar rcp tmpdir) (package-build--write-pkg-readme rcp files)) (delete-directory tmpdir t nil)))
...
  package-build--build-multi-file-package(#<package-github-recipe package-github-recipe-159158fd3f5c> (("devdocs.el" . "devdocs.el")))
  funcall(package-build--build-multi-file-package #<package-github-recipe package-github-recipe-159158fd3f5c> (("devdocs.el" . "devdocs.el")))
  (cond ((= (length files) 0) (package-build--error rcp "Unable to find files matching recipe patterns")) (package-build-build-function (funcall package-build-build-function rcp files)) ((= (length files) 1) (package-build--build-single-file-package rcp files)) (t (package-build--build-multi-file-package rcp files)))
  (let ((files (package-build-expand-files-spec rcp t))) (cond ((= (length files) 0) (package-build--error rcp "Unable to find files matching recipe patterns")) (package-build-build-function (funcall package-build-build-function rcp files)) ((= (length files) 1) (package-build--build-single-file-package rcp files)) (t (package-build--build-multi-file-package rcp files))) (if package-build-badge-data (progn (package-build--write-badge-image name version package-build-archive-dir))))
  (progn (package-build--checkout rcp) (setenv "PACKAGE_VERSION" version) (setenv "PACKAGE_REVISION" commit) (setenv "PACKAGE_REVDESC" revdesc) (let* ((s (and t package-build-run-recipe-shell-command)) (command (and s (eieio-oref rcp 'shell-command)))) (if command (progn (package-build--message "Running %s" command) (package-build--call-sandboxed rcp shell-file-name shell-command-switch command)))) (let* ((s (and t package-build-run-recipe-make-targets)) (targets (and s (eieio-oref rcp 'make-targets)))) (if targets (progn (package-build--message "Running make %s" (string-join targets " ")) (apply #'package-build--call-sandboxed rcp "make" targets)) nil)) (let ((files (package-build-expand-files-spec rcp t))) (cond ((= (length files) 0) (package-build--error rcp "Unable to find files matching recipe patterns")) (package-build-build-function (funcall package-build-build-function rcp files)) ((= (length files) 1) (package-build--build-single-file-package rcp files)) (t (package-build--build-multi-file-package rcp files))) (if package-build-badge-data (progn (package-build--write-badge-image name version package-build-archive-dir)))))
  (let ((name x139) (version x140) (commit x141) (revdesc x142)) (progn (package-build--checkout rcp) (setenv "PACKAGE_VERSION" version) (setenv "PACKAGE_REVISION" commit) (setenv "PACKAGE_REVDESC" revdesc) (let* ((s (and t package-build-run-recipe-shell-command)) (command (and s (eieio-oref rcp 'shell-command)))) (if command (progn (package-build--message "Running %s" command) (package-build--call-sandboxed rcp shell-file-name shell-command-switch command)))) (let* ((s (and t package-build-run-recipe-make-targets)) (targets (and s (eieio-oref rcp 'make-targets)))) (if targets (progn (package-build--message "Running make %s" (string-join targets " ")) (apply #'package-build--call-sandboxed rcp "make" targets)) nil)) (let ((files (package-build-expand-files-spec rcp t))) (cond ((= (length files) 0) (package-build--error rcp "Unable to find files matching recipe patterns")) (package-build-build-function (funcall package-build-build-function rcp files)) ((= (length files) 1) (package-build--build-single-file-package rcp files)) (t (package-build--build-multi-file-package rcp files))) (if package-build-badge-data (progn (package-build--write-badge-image name version package-build-archive-dir))))))
  (let* ((x139 (eieio-oref x0 'name)) (x140 (eieio-oref x0 'version)) (x141 (eieio-oref x0 'commit)) (x142 (eieio-oref x0 'revdesc))) (let ((name x139) (version x140) (commit x141) (revdesc x142)) (progn (package-build--checkout rcp) (setenv "PACKAGE_VERSION" version) (setenv "PACKAGE_REVISION" commit) (setenv "PACKAGE_REVDESC" revdesc) (let* ((s (and t package-build-run-recipe-shell-command)) (command (and s (eieio-oref rcp ...)))) (if command (progn (package-build--message "Running %s" command) (package-build--call-sandboxed rcp shell-file-name shell-command-switch command)))) (let* ((s (and t package-build-run-recipe-make-targets)) (targets (and s (eieio-oref rcp ...)))) (if targets (progn (package-build--message "Running make %s" (string-join targets " ")) (apply #'package-build--call-sandboxed rcp "make" targets)) nil)) (let ((files (package-build-expand-files-spec rcp t))) (cond ((= (length files) 0) (package-build--error rcp "Unable to find files matching recipe patterns")) (package-build-build-function (funcall package-build-build-function rcp files)) ((= (length files) 1) (package-build--build-single-file-package rcp files)) (t (package-build--build-multi-file-package rcp files))) (if package-build-badge-data (progn (package-build--write-badge-image name version package-build-archive-dir)))))))
  (progn (ignore (eieio-object-p x0)) (let* ((x139 (eieio-oref x0 'name)) (x140 (eieio-oref x0 'version)) (x141 (eieio-oref x0 'commit)) (x142 (eieio-oref x0 'revdesc))) (let ((name x139) (version x140) (commit x141) (revdesc x142)) (progn (package-build--checkout rcp) (setenv "PACKAGE_VERSION" version) (setenv "PACKAGE_REVISION" commit) (setenv "PACKAGE_REVDESC" revdesc) (let* ((s (and t package-build-run-recipe-shell-command)) (command (and s ...))) (if command (progn (package-build--message "Running %s" command) (package-build--call-sandboxed rcp shell-file-name shell-command-switch command)))) (let* ((s (and t package-build-run-recipe-make-targets)) (targets (and s ...))) (if targets (progn (package-build--message "Running make %s" ...) (apply ... rcp "make" targets)) nil)) (let ((files (package-build-expand-files-spec rcp t))) (cond ((= ... 0) (package-build--error rcp "Unable to find files matching recipe patterns")) (package-build-build-function (funcall package-build-build-function rcp files)) ((= ... 1) (package-build--build-single-file-package rcp files)) (t (package-build--build-multi-file-package rcp files))) (if package-build-badge-data (progn (package-build--write-badge-image name version package-build-archive-dir))))))))
  (let ((x0 rcp) (process-environment (copy-sequence process-environment))) (progn (ignore (eieio-object-p x0)) (let* ((x139 (eieio-oref x0 'name)) (x140 (eieio-oref x0 'version)) (x141 (eieio-oref x0 'commit)) (x142 (eieio-oref x0 'revdesc))) (let ((name x139) (version x140) (commit x141) (revdesc x142)) (progn (package-build--checkout rcp) (setenv "PACKAGE_VERSION" version) (setenv "PACKAGE_REVISION" commit) (setenv "PACKAGE_REVDESC" revdesc) (let* ((s ...) (command ...)) (if command (progn ... ...))) (let* ((s ...) (targets ...)) (if targets (progn ... ...) nil)) (let ((files ...)) (cond (... ...) (package-build-build-function ...) (... ...) (t ...)) (if package-build-badge-data (progn ...))))))))
  (unwind-protect (let ((x0 rcp) (process-environment (copy-sequence process-environment))) (progn (ignore (eieio-object-p x0)) (let* ((x139 (eieio-oref x0 'name)) (x140 (eieio-oref x0 'version)) (x141 (eieio-oref x0 'commit)) (x142 (eieio-oref x0 'revdesc))) (let ((name x139) (version x140) (commit x141) (revdesc x142)) (progn (package-build--checkout rcp) (setenv "PACKAGE_VERSION" version) (setenv "PACKAGE_REVISION" commit) (setenv "PACKAGE_REVDESC" revdesc) (let* (... ...) (if command ...)) (let* (... ...) (if targets ... nil)) (let (...) (cond ... ... ... ...) (if package-build-badge-data ...))))))) (package-build--cleanup rcp))
  (let ((default-directory (package-recipe--working-tree rcp))) (unwind-protect (let ((x0 rcp) (process-environment (copy-sequence process-environment))) (progn (ignore (eieio-object-p x0)) (let* ((x139 (eieio-oref x0 ...)) (x140 (eieio-oref x0 ...)) (x141 (eieio-oref x0 ...)) (x142 (eieio-oref x0 ...))) (let ((name x139) (version x140) (commit x141) (revdesc x142)) (progn (package-build--checkout rcp) (setenv "PACKAGE_VERSION" version) (setenv "PACKAGE_REVISION" commit) (setenv "PACKAGE_REVDESC" revdesc) (let* ... ...) (let* ... ...) (let ... ... ...)))))) (package-build--cleanup rcp)))
  package-build--package(#<package-github-recipe package-github-recipe-159158fd3f5c>)
  (progn (package-build--package rcp) (if dump-archive-contents (progn (package-build-dump-archive-contents))))
  (if version (progn (package-build--package rcp) (if dump-archive-contents (progn (package-build-dump-archive-contents)))))
  (if package-build--inhibit-update nil (package-build--select-version rcp) (setq version (eieio-oref rcp 'version)) (if version (progn (package-build--package rcp) (if dump-archive-contents (progn (package-build-dump-archive-contents))))) (if (not version) (message " ✗ Cannot determine version!") (message " ✓ Success:") (let ((--dolist-tail-- (directory-files-and-attributes package-build-archive-dir nil (format "\\`%s-[0-9]+" name)))) (while --dolist-tail-- (let ((x136 (car --dolist-tail--))) (progn (ignore (consp x136)) (let* (... ...) (let ... ...))) (setq --dolist-tail-- (cdr --dolist-tail--)))))))
  (let* ((start-time (current-time)) (rcp (package-recipe-lookup name)) (url (eieio-oref rcp 'url)) (repo (eieio-oref rcp 'repo)) (fetcher (package-recipe--fetcher rcp)) (version nil)) (cond ((not noninteractive) (message " • %s package %s (from %s)..." (if package-build--inhibit-update "Fetching" "Building") name (if repo (format "%s:%s" fetcher repo) url))) (package-build-verbose (message "Package: %s" name) (message "Fetcher: %s" fetcher) (message "Source:  %s\n" url))) (package-build--fetch rcp) (if package-build--inhibit-update nil (package-build--select-version rcp) (setq version (eieio-oref rcp 'version)) (if version (progn (package-build--package rcp) (if dump-archive-contents (progn (package-build-dump-archive-contents))))) (if (not version) (message " ✗ Cannot determine version!") (message " ✓ Success:") (let ((--dolist-tail-- (directory-files-and-attributes package-build-archive-dir nil (format "\\`%s-[0-9]+" name)))) (while --dolist-tail-- (let ((x136 ...)) (progn (ignore ...) (let* ... ...)) (setq --dolist-tail-- (cdr --dolist-tail--))))))) (message "%s %s in %.3fs, finished at %s" (if version "Built" "Fetched") name (float-time (time-since start-time)) (format-time-string "%FT%T%z" nil t)))
  package-build-archive("devdocs")
  command-line-1(("-L" "/mnt/store/melpa/package-build" "--eval" "(progn (setq package-build-stable nil) (setq packa..." "--eval" "(progn (setq package-build--melpa-base \"/mnt/store..." "--eval" "(setq package-build-timeout-secs 600)" "--eval" "()" "--load" "package-build.el" "--eval" "(package-build-archive \"devdocs\")"))
  command-line()
  normal-top-level()

